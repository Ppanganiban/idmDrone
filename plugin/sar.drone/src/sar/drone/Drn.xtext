grammar sar.drone.Drn with org.eclipse.xtext.common.Terminals

generate drn "http://www.drone.sar/Drn"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore


Root :
	Configuration | Model | Library
;
Model :
	'CHOREOGRAPHY'
	'{'
	  'configuration' config=[Configuration]';'
		('import' libraries += [Library]';')*
		(context = Context)?
		assignement+=Assignement
		(assignement+=Assignement)*
		'start' '=' main=RefPart ';'
	'}'
;

Configuration :
  'CONFIGURATION' name=ID
	'{'
		(types += TypeGeneric)*
		(devices += Device)*
    'CONNECTION''by'connection=ConnectionType';'
	'}'
;
Library :
  'LIBRARY' name=ID
  '{'
    (assignement+=Assignement)*
  '}'
;

/******************* Contexte *********************/

Context :
	 name='CONTEXT'
	'{'
		'where' '=' where=Where';'
		limit+=Limit ";"
		(limit+=Limit ";")*
	'}'
;
	
Limit :
	MaxSpeed | Surface | InitialPosition
;

Surface :
	MaxHeight | MaxLength | MaxWidth	
;

InitialPosition:
	InitialPositionX | InitialPositionY | InitialDirection
;

InitialDirection:
	name = "initialDirection"
	'=' (value=DirectionType)
;

InitialPositionX:
	name = "positionX"
	'=' (value=INT)
;

InitialPositionY:
	name = "positionY"
	'=' (value=INT)
;
MaxLength:
	name = "maxLength"
	'='(value=INT)
;

MaxWidth:
	name = "maxWidth"
	'='(value=INT)		
;

MaxSpeed :
	name="maxSpeed"
	'='(value=INT)	
;

MaxHeight :
	name="maxHeight"
	'='(value=INT)
;

/******************* Alias *********************/

Assignement :
	name=ID'{'
		operandes+=Expression ';'
		(operandes+=Expression ';')*
	'}'
;

/******************* Expression *********************/


Expression :
	( move=Movement ('X' (repeatCST=INT))? (^with+=With)? 
	| '(' move=Movement ('then'then+=Expression) ('then'then+=Expression)* ')' ('X' (repeatCST=INT))? (^with+=With)?
	)
;

Movement:
	And|RefPart|RefPartLib|DepX_Impl|DepY_Impl|DepZ_Impl|DepXY_IMPL|DepXZ_IMPL|DepYZ_IMPL|DepXYZ_IMPL|TakeOff|Wait|Rotate|Land
;

RefPart :
	variable_partie=[Assignement]
;

RefPartLib :
	lib=[Library]'.'assignement=[Assignement]
;
And :
	{And}
	name='merge''('
	 (rotate+=Rotate|depx+=DepX_Impl|depy+=DepY_Impl|depz+=DepZ_Impl)','
	 (rotate+=Rotate|depx+=DepX_Impl|depy+=DepY_Impl|depz+=DepZ_Impl)
	 (','(rotate+=Rotate|depx+=DepX_Impl|depy+=DepY_Impl|depz+=DepZ_Impl) )*
	')'
;

/******************* Action *********************/
	


DepY_Impl: FORWARD | BACKWARD;

FORWARD:
	name="forward" '('
		'distance''=' distanceCST=INT
		'temps''=' tempsCST=INT 
	')'
;
BACKWARD:
	 name="backward" '('
		'distance''=' distanceCST=INT
		'temps''=' tempsCST=INT
	')'
;

DepX_Impl : LEFT | RIGHT
;
LEFT:
	 name="left" '('
		'distance''=' distanceCST=INT
		'temps''=' tempsCST=INT
	')'
;
RIGHT:
	 name="right" '('
		'distance''=' distanceCST=INT
		'temps''=' tempsCST=INT
	')'
;


DepZ_Impl : UP|DOWN;

UP:
	 name="up" '('
		'distance''=' distanceCST=INT
		'temps''=' tempsCST=INT
	')'
;
DOWN:
	 name="down" '('
		'distance''=' distanceCST=INT
		'temps''=' tempsCST=INT
	')'
;




DepXY_IMPL: CERCLEXY | CARREXY;

CERCLEXY:
	 name="cercleXY" '('
		'rayon''=' rayonCST=INT
		'temps''=' tempsCST=INT
	')'
;
CARREXY:
	 name="carreXY" '('
		'cote''=' coteCST = INT
		'temps''=' tempsCST=INT
	')'
;

DepYZ_IMPL: CERCLEYZ | CARREYZ;


CERCLEYZ:
	 name="cercleYZ" '('
		'rayon''=' rayonCST=INT
		'temps''=' tempsCST=INT  
	')'
;
CARREYZ:
	 name="carreYZ" '('
		'cote''=' coteCST = INT
		'temps''=' tempsCST=INT
	')'
;

DepXZ_IMPL: CERCLEXZ | CARREXZ;

CERCLEXZ:
	 name="cercleXZ" '('
		'rayon''=' rayonCST=INT
		'temps''=' tempsCST=INT  
	')'
;
CARREXZ:
	 name="carreXZ" '('
		'cote''=' coteCST = INT
		'temps''=' tempsCST=INT
	')'
;

DepXYZ_IMPL: Flip;

Flip :
	 name="flip" '('')'
;

Rotate :
	 name="rotate" '(''angle''=' angleCST=EInt  'temps''=' tempsCST=INT ')';
	
Wait :
	 name="wait" '(''temps''=' tempsCST=INT')';

TakeOff :
	 name="takeoff" '('')' 
;

Land :
	 name="land"'('')'
;


/******************* Option *********************/
Device:
	'DEVICE' name = ID
	'{'
		(declarations += Declaration)
		(';' declarations += Declaration)*
	'}'
;

Declaration:
	'type' (type=[TypeGeneric] | typePrimitif=TypePrimitif) name=ID
;

Definition :
	left = [Declaration] '=' ((right	= [Element])
							| (real 	= EReal)
							| (int  	= EInt)
							| (bool		= EBool)
							| (text 	= STRING))
;
With :
	name='with' option+=RefDevice ( "," option+=RefDevice)*
;


RefDevice :
	dev = [Device]
	'('
		'mode' mode = Mode
		(','definitions += Definition)*
	')'
;

/******************* Type *********************/

TypeGeneric :
	'Type' name = ID
	'{'
		elements+= Element
		(';' elements+= Element)*
	'}'
;

Element:
	'element' name = ID
;

enum TypePrimitif:
	boolType 		= 'BOOLEAN'
	| realType		= 'REAL'
	| intType 		= 'NUMBER'
	| stringType	= 'TEXT'
;
EInt :
	'-'? INT;

EReal :
	'-'? INT'.'INT;

enum Mode :// Mode:
				OFF = 'OFF' | ON = 'ON';
enum EBool :
				TRUE = 'TRUE' | FALSE = 'FALSE';
enum DirectionType :
				FRONT = 'FRONT' | BEHIND = 'BEHIND' | LEFT = 'LEFT' | RIGHT = 'RIGHT';

enum Where :
	INDOOR = 'INDOOR' | OUTDOOR = 'OUTBOOR'
; 
ConnectionType :
  Bluetooth | Wifi 
;

Bluetooth:
  name='BLUETOOTH'':' adress=MAC
;

terminal MAC returns ecore::EString:
	(('0'..'9')|('A'..'E'))(('0'..'9')|('A'..'E'))':'
	(('0'..'9')|('A'..'E'))(('0'..'9')|('A'..'E'))':'
	(('0'..'9')|('A'..'E'))(('0'..'9')|('A'..'E'))':'
	(('0'..'9')|('A'..'E'))(('0'..'9')|('A'..'E'))':'
	(('0'..'9')|('A'..'E'))(('0'..'9')|('A'..'E'))':'
	(('0'..'9')|('A'..'E'))(('0'..'9')|('A'..'E'))
;


Wifi:
  name='WI-FI'':'adress=IpAdress
;
IpAdress:
  INT'.'INT'.'INT'.'INT  
;