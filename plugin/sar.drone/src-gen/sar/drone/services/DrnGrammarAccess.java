/*
 * generated by Xtext 2.10.0
 */
package sar.drone.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class DrnGrammarAccess extends AbstractGrammarElementFinder {
	
	public class RootElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sar.drone.Drn.Root");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLibraryParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cModelParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Root:
		//	Library | Model;
		@Override public ParserRule getRule() { return rule; }
		
		//Library | Model
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Library
		public RuleCall getLibraryParserRuleCall_0() { return cLibraryParserRuleCall_0; }
		
		//Model
		public RuleCall getModelParserRuleCall_1() { return cModelParserRuleCall_1; }
	}
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sar.drone.Drn.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCHOREOGRAPHYKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cImportKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cLibrariesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cLibrariesLibraryCrossReference_2_1_0 = (CrossReference)cLibrariesAssignment_2_1.eContents().get(0);
		private final RuleCall cLibrariesLibraryIDTerminalRuleCall_2_1_0_1 = (RuleCall)cLibrariesLibraryCrossReference_2_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cContextAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cContextContextParserRuleCall_3_0 = (RuleCall)cContextAssignment_3.eContents().get(0);
		private final Assignment cAssignementAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAssignementAssignementParserRuleCall_4_0 = (RuleCall)cAssignementAssignment_4.eContents().get(0);
		private final Assignment cAssignementAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cAssignementAssignementParserRuleCall_5_0 = (RuleCall)cAssignementAssignment_5.eContents().get(0);
		private final Keyword cStartKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cEqualsSignKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cMainAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cMainRefPartParserRuleCall_8_0 = (RuleCall)cMainAssignment_8.eContents().get(0);
		private final Keyword cSemicolonKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//Model:
		//	'CHOREOGRAPHY'
		//	'{' ('import' libraries+=[Library] ';')*
		//	context=Context?
		//	assignement+=Assignement
		//	assignement+=Assignement*
		//	'start' '=' main=RefPart ';'
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'CHOREOGRAPHY' '{' ('import' libraries+=[Library] ';')* context=Context? assignement+=Assignement
		//assignement+=Assignement* 'start' '=' main=RefPart ';' '}'
		public Group getGroup() { return cGroup; }
		
		//'CHOREOGRAPHY'
		public Keyword getCHOREOGRAPHYKeyword_0() { return cCHOREOGRAPHYKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//('import' libraries+=[Library] ';')*
		public Group getGroup_2() { return cGroup_2; }
		
		//'import'
		public Keyword getImportKeyword_2_0() { return cImportKeyword_2_0; }
		
		//libraries+=[Library]
		public Assignment getLibrariesAssignment_2_1() { return cLibrariesAssignment_2_1; }
		
		//[Library]
		public CrossReference getLibrariesLibraryCrossReference_2_1_0() { return cLibrariesLibraryCrossReference_2_1_0; }
		
		//ID
		public RuleCall getLibrariesLibraryIDTerminalRuleCall_2_1_0_1() { return cLibrariesLibraryIDTerminalRuleCall_2_1_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_2_2() { return cSemicolonKeyword_2_2; }
		
		//context=Context?
		public Assignment getContextAssignment_3() { return cContextAssignment_3; }
		
		//Context
		public RuleCall getContextContextParserRuleCall_3_0() { return cContextContextParserRuleCall_3_0; }
		
		//assignement+=Assignement
		public Assignment getAssignementAssignment_4() { return cAssignementAssignment_4; }
		
		//Assignement
		public RuleCall getAssignementAssignementParserRuleCall_4_0() { return cAssignementAssignementParserRuleCall_4_0; }
		
		//assignement+=Assignement*
		public Assignment getAssignementAssignment_5() { return cAssignementAssignment_5; }
		
		//Assignement
		public RuleCall getAssignementAssignementParserRuleCall_5_0() { return cAssignementAssignementParserRuleCall_5_0; }
		
		//'start'
		public Keyword getStartKeyword_6() { return cStartKeyword_6; }
		
		//'='
		public Keyword getEqualsSignKeyword_7() { return cEqualsSignKeyword_7; }
		
		//main=RefPart
		public Assignment getMainAssignment_8() { return cMainAssignment_8; }
		
		//RefPart
		public RuleCall getMainRefPartParserRuleCall_8_0() { return cMainRefPartParserRuleCall_8_0; }
		
		//';'
		public Keyword getSemicolonKeyword_9() { return cSemicolonKeyword_9; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }
	}
	public class LibraryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sar.drone.Drn.Library");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLIBRARYKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypesTypeGenericParserRuleCall_3_0 = (RuleCall)cTypesAssignment_3.eContents().get(0);
		private final Assignment cDevicesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDevicesDeviceParserRuleCall_4_0 = (RuleCall)cDevicesAssignment_4.eContents().get(0);
		private final Assignment cAssignementAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cAssignementAssignementParserRuleCall_5_0 = (RuleCall)cAssignementAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Library:
		//	'LIBRARY' name=ID
		//	'{'
		//	types+=TypeGeneric*
		//	devices+=Device*
		//	assignement+=Assignement*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'LIBRARY' name=ID '{' types+=TypeGeneric* devices+=Device* assignement+=Assignement* '}'
		public Group getGroup() { return cGroup; }
		
		//'LIBRARY'
		public Keyword getLIBRARYKeyword_0() { return cLIBRARYKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//types+=TypeGeneric*
		public Assignment getTypesAssignment_3() { return cTypesAssignment_3; }
		
		//TypeGeneric
		public RuleCall getTypesTypeGenericParserRuleCall_3_0() { return cTypesTypeGenericParserRuleCall_3_0; }
		
		//devices+=Device*
		public Assignment getDevicesAssignment_4() { return cDevicesAssignment_4; }
		
		//Device
		public RuleCall getDevicesDeviceParserRuleCall_4_0() { return cDevicesDeviceParserRuleCall_4_0; }
		
		//assignement+=Assignement*
		public Assignment getAssignementAssignment_5() { return cAssignementAssignment_5; }
		
		//Assignement
		public RuleCall getAssignementAssignementParserRuleCall_5_0() { return cAssignementAssignementParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class ContextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sar.drone.Drn.Context");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameCONTEXTKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLimitAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLimitLimitParserRuleCall_2_0 = (RuleCall)cLimitAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cLimitAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cLimitLimitParserRuleCall_4_0_0 = (RuleCall)cLimitAssignment_4_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		/// ******************* Contexte ********************* / Context:
		//	name='CONTEXT'
		//	'{'
		//	limit+=Limit ";" (limit+=Limit ";")*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//name='CONTEXT' '{' limit+=Limit ";" (limit+=Limit ";")* '}'
		public Group getGroup() { return cGroup; }
		
		//name='CONTEXT'
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//'CONTEXT'
		public Keyword getNameCONTEXTKeyword_0_0() { return cNameCONTEXTKeyword_0_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//limit+=Limit
		public Assignment getLimitAssignment_2() { return cLimitAssignment_2; }
		
		//Limit
		public RuleCall getLimitLimitParserRuleCall_2_0() { return cLimitLimitParserRuleCall_2_0; }
		
		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
		
		//(limit+=Limit ";")*
		public Group getGroup_4() { return cGroup_4; }
		
		//limit+=Limit
		public Assignment getLimitAssignment_4_0() { return cLimitAssignment_4_0; }
		
		//Limit
		public RuleCall getLimitLimitParserRuleCall_4_0_0() { return cLimitLimitParserRuleCall_4_0_0; }
		
		//";"
		public Keyword getSemicolonKeyword_4_1() { return cSemicolonKeyword_4_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class LimitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sar.drone.Drn.Limit");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMaxSpeedParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSurfaceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cInitialPositionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Limit:
		//	MaxSpeed | Surface | InitialPosition;
		@Override public ParserRule getRule() { return rule; }
		
		//MaxSpeed | Surface | InitialPosition
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//MaxSpeed
		public RuleCall getMaxSpeedParserRuleCall_0() { return cMaxSpeedParserRuleCall_0; }
		
		//Surface
		public RuleCall getSurfaceParserRuleCall_1() { return cSurfaceParserRuleCall_1; }
		
		//InitialPosition
		public RuleCall getInitialPositionParserRuleCall_2() { return cInitialPositionParserRuleCall_2; }
	}
	public class SurfaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sar.drone.Drn.Surface");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMaxHeightParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMaxLengthParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cMaxWidthParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Surface:
		//	MaxHeight | MaxLength | MaxWidth;
		@Override public ParserRule getRule() { return rule; }
		
		//MaxHeight | MaxLength | MaxWidth
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//MaxHeight
		public RuleCall getMaxHeightParserRuleCall_0() { return cMaxHeightParserRuleCall_0; }
		
		//MaxLength
		public RuleCall getMaxLengthParserRuleCall_1() { return cMaxLengthParserRuleCall_1; }
		
		//MaxWidth
		public RuleCall getMaxWidthParserRuleCall_2() { return cMaxWidthParserRuleCall_2; }
	}
	public class InitialPositionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sar.drone.Drn.InitialPosition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInitialPositionXParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cInitialPositionYParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cInitialDirectionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//InitialPosition:
		//	InitialPositionX | InitialPositionY | InitialDirection;
		@Override public ParserRule getRule() { return rule; }
		
		//InitialPositionX | InitialPositionY | InitialDirection
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//InitialPositionX
		public RuleCall getInitialPositionXParserRuleCall_0() { return cInitialPositionXParserRuleCall_0; }
		
		//InitialPositionY
		public RuleCall getInitialPositionYParserRuleCall_1() { return cInitialPositionYParserRuleCall_1; }
		
		//InitialDirection
		public RuleCall getInitialDirectionParserRuleCall_2() { return cInitialDirectionParserRuleCall_2; }
	}
	public class InitialDirectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sar.drone.Drn.InitialDirection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameInitialDirectionKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueDirectionTypeEnumRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//InitialDirection:
		//	name="initialDirection"
		//	'=' value=DirectionType;
		@Override public ParserRule getRule() { return rule; }
		
		//name="initialDirection" '=' value=DirectionType
		public Group getGroup() { return cGroup; }
		
		//name="initialDirection"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//"initialDirection"
		public Keyword getNameInitialDirectionKeyword_0_0() { return cNameInitialDirectionKeyword_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//value=DirectionType
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//DirectionType
		public RuleCall getValueDirectionTypeEnumRuleCall_2_0() { return cValueDirectionTypeEnumRuleCall_2_0; }
	}
	public class InitialPositionXElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sar.drone.Drn.InitialPositionX");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNamePositionXKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueINTTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//InitialPositionX:
		//	name="positionX"
		//	'=' value=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//name="positionX" '=' value=INT
		public Group getGroup() { return cGroup; }
		
		//name="positionX"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//"positionX"
		public Keyword getNamePositionXKeyword_0_0() { return cNamePositionXKeyword_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//value=INT
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_2_0() { return cValueINTTerminalRuleCall_2_0; }
	}
	public class InitialPositionYElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sar.drone.Drn.InitialPositionY");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNamePositionYKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueINTTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//InitialPositionY:
		//	name="positionY"
		//	'=' value=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//name="positionY" '=' value=INT
		public Group getGroup() { return cGroup; }
		
		//name="positionY"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//"positionY"
		public Keyword getNamePositionYKeyword_0_0() { return cNamePositionYKeyword_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//value=INT
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_2_0() { return cValueINTTerminalRuleCall_2_0; }
	}
	public class MaxLengthElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sar.drone.Drn.MaxLength");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameMaxLengthKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueINTTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//MaxLength:
		//	name="maxLength"
		//	'=' value=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//name="maxLength" '=' value=INT
		public Group getGroup() { return cGroup; }
		
		//name="maxLength"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//"maxLength"
		public Keyword getNameMaxLengthKeyword_0_0() { return cNameMaxLengthKeyword_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//value=INT
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_2_0() { return cValueINTTerminalRuleCall_2_0; }
	}
	public class MaxWidthElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sar.drone.Drn.MaxWidth");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameMaxWidthKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueINTTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//MaxWidth:
		//	name="maxWidth"
		//	'=' value=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//name="maxWidth" '=' value=INT
		public Group getGroup() { return cGroup; }
		
		//name="maxWidth"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//"maxWidth"
		public Keyword getNameMaxWidthKeyword_0_0() { return cNameMaxWidthKeyword_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//value=INT
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_2_0() { return cValueINTTerminalRuleCall_2_0; }
	}
	public class MaxSpeedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sar.drone.Drn.MaxSpeed");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameMaxSpeedKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueINTTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//MaxSpeed:
		//	name="maxSpeed"
		//	'=' value=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//name="maxSpeed" '=' value=INT
		public Group getGroup() { return cGroup; }
		
		//name="maxSpeed"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//"maxSpeed"
		public Keyword getNameMaxSpeedKeyword_0_0() { return cNameMaxSpeedKeyword_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//value=INT
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_2_0() { return cValueINTTerminalRuleCall_2_0; }
	}
	public class MaxHeightElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sar.drone.Drn.MaxHeight");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameMaxHeightKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueINTTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//MaxHeight:
		//	name="maxHeight"
		//	'=' value=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//name="maxHeight" '=' value=INT
		public Group getGroup() { return cGroup; }
		
		//name="maxHeight"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//"maxHeight"
		public Keyword getNameMaxHeightKeyword_0_0() { return cNameMaxHeightKeyword_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//value=INT
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_2_0() { return cValueINTTerminalRuleCall_2_0; }
	}
	public class AssignementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sar.drone.Drn.Assignement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOperandesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOperandesExpressionParserRuleCall_2_0 = (RuleCall)cOperandesAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cOperandesAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cOperandesExpressionParserRuleCall_4_0_0 = (RuleCall)cOperandesAssignment_4_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		/// ******************* Alias ********************* / Assignement:
		//	name=ID '{'
		//	operandes+=Expression ';' (operandes+=Expression ';')*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID '{' operandes+=Expression ';' (operandes+=Expression ';')* '}'
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//operandes+=Expression
		public Assignment getOperandesAssignment_2() { return cOperandesAssignment_2; }
		
		//Expression
		public RuleCall getOperandesExpressionParserRuleCall_2_0() { return cOperandesExpressionParserRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
		
		//(operandes+=Expression ';')*
		public Group getGroup_4() { return cGroup_4; }
		
		//operandes+=Expression
		public Assignment getOperandesAssignment_4_0() { return cOperandesAssignment_4_0; }
		
		//Expression
		public RuleCall getOperandesExpressionParserRuleCall_4_0_0() { return cOperandesExpressionParserRuleCall_4_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4_1() { return cSemicolonKeyword_4_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sar.drone.Drn.Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cMoveAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cMoveMovementParserRuleCall_0_0_0 = (RuleCall)cMoveAssignment_0_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cXKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cRepeatCSTAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cRepeatCSTINTTerminalRuleCall_0_1_1_0 = (RuleCall)cRepeatCSTAssignment_0_1_1.eContents().get(0);
		private final Assignment cWithAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cWithWithParserRuleCall_0_2_0 = (RuleCall)cWithAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cMoveAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cMoveMovementParserRuleCall_1_1_0 = (RuleCall)cMoveAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cThenKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cThenAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cThenExpressionParserRuleCall_1_2_1_0 = (RuleCall)cThenAssignment_1_2_1.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cGroup_1.eContents().get(3);
		private final Keyword cThenKeyword_1_3_0 = (Keyword)cGroup_1_3.eContents().get(0);
		private final Assignment cThenAssignment_1_3_1 = (Assignment)cGroup_1_3.eContents().get(1);
		private final RuleCall cThenExpressionParserRuleCall_1_3_1_0 = (RuleCall)cThenAssignment_1_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Group cGroup_1_5 = (Group)cGroup_1.eContents().get(5);
		private final Keyword cXKeyword_1_5_0 = (Keyword)cGroup_1_5.eContents().get(0);
		private final Assignment cRepeatCSTAssignment_1_5_1 = (Assignment)cGroup_1_5.eContents().get(1);
		private final RuleCall cRepeatCSTINTTerminalRuleCall_1_5_1_0 = (RuleCall)cRepeatCSTAssignment_1_5_1.eContents().get(0);
		private final Assignment cWithAssignment_1_6 = (Assignment)cGroup_1.eContents().get(6);
		private final RuleCall cWithWithParserRuleCall_1_6_0 = (RuleCall)cWithAssignment_1_6.eContents().get(0);
		
		/// ******************* Expression ********************* / Expression:
		//	move=Movement ('X' repeatCST=INT)? ^with+=With?
		//	| '(' move=Movement ('then' then+=Expression) ('then' then+=Expression)* ')' ('X' repeatCST=INT)? ^with+=With?;
		@Override public ParserRule getRule() { return rule; }
		
		//move=Movement ('X' repeatCST=INT)? ^with+=With? | '(' move=Movement ('then' then+=Expression) ('then' then+=Expression)*
		//')' ('X' repeatCST=INT)? ^with+=With?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//move=Movement ('X' repeatCST=INT)? ^with+=With?
		public Group getGroup_0() { return cGroup_0; }
		
		//move=Movement
		public Assignment getMoveAssignment_0_0() { return cMoveAssignment_0_0; }
		
		//Movement
		public RuleCall getMoveMovementParserRuleCall_0_0_0() { return cMoveMovementParserRuleCall_0_0_0; }
		
		//('X' repeatCST=INT)?
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//'X'
		public Keyword getXKeyword_0_1_0() { return cXKeyword_0_1_0; }
		
		//repeatCST=INT
		public Assignment getRepeatCSTAssignment_0_1_1() { return cRepeatCSTAssignment_0_1_1; }
		
		//INT
		public RuleCall getRepeatCSTINTTerminalRuleCall_0_1_1_0() { return cRepeatCSTINTTerminalRuleCall_0_1_1_0; }
		
		//^with+=With?
		public Assignment getWithAssignment_0_2() { return cWithAssignment_0_2; }
		
		//With
		public RuleCall getWithWithParserRuleCall_0_2_0() { return cWithWithParserRuleCall_0_2_0; }
		
		//'(' move=Movement ('then' then+=Expression) ('then' then+=Expression)* ')' ('X' repeatCST=INT)? ^with+=With?
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//move=Movement
		public Assignment getMoveAssignment_1_1() { return cMoveAssignment_1_1; }
		
		//Movement
		public RuleCall getMoveMovementParserRuleCall_1_1_0() { return cMoveMovementParserRuleCall_1_1_0; }
		
		//('then' then+=Expression)
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//'then'
		public Keyword getThenKeyword_1_2_0() { return cThenKeyword_1_2_0; }
		
		//then+=Expression
		public Assignment getThenAssignment_1_2_1() { return cThenAssignment_1_2_1; }
		
		//Expression
		public RuleCall getThenExpressionParserRuleCall_1_2_1_0() { return cThenExpressionParserRuleCall_1_2_1_0; }
		
		//('then' then+=Expression)*
		public Group getGroup_1_3() { return cGroup_1_3; }
		
		//'then'
		public Keyword getThenKeyword_1_3_0() { return cThenKeyword_1_3_0; }
		
		//then+=Expression
		public Assignment getThenAssignment_1_3_1() { return cThenAssignment_1_3_1; }
		
		//Expression
		public RuleCall getThenExpressionParserRuleCall_1_3_1_0() { return cThenExpressionParserRuleCall_1_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_4() { return cRightParenthesisKeyword_1_4; }
		
		//('X' repeatCST=INT)?
		public Group getGroup_1_5() { return cGroup_1_5; }
		
		//'X'
		public Keyword getXKeyword_1_5_0() { return cXKeyword_1_5_0; }
		
		//repeatCST=INT
		public Assignment getRepeatCSTAssignment_1_5_1() { return cRepeatCSTAssignment_1_5_1; }
		
		//INT
		public RuleCall getRepeatCSTINTTerminalRuleCall_1_5_1_0() { return cRepeatCSTINTTerminalRuleCall_1_5_1_0; }
		
		//^with+=With?
		public Assignment getWithAssignment_1_6() { return cWithAssignment_1_6; }
		
		//With
		public RuleCall getWithWithParserRuleCall_1_6_0() { return cWithWithParserRuleCall_1_6_0; }
	}
	public class MovementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sar.drone.Drn.Movement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAndParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRefPartParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cRefPartLibParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDepX_ImplParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cDepY_ImplParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cDepZ_ImplParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cDepXY_IMPLParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cDepXZ_IMPLParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cDepYZ_IMPLParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cDepXYZ_IMPLParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cTakeOffParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cWaitParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cRotateParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cLandParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		
		//Movement:
		//	And | RefPart | RefPartLib | DepX_Impl | DepY_Impl | DepZ_Impl | DepXY_IMPL | DepXZ_IMPL | DepYZ_IMPL | DepXYZ_IMPL |
		//	TakeOff | Wait | Rotate | Land;
		@Override public ParserRule getRule() { return rule; }
		
		//And | RefPart | RefPartLib | DepX_Impl | DepY_Impl | DepZ_Impl | DepXY_IMPL | DepXZ_IMPL | DepYZ_IMPL | DepXYZ_IMPL |
		//TakeOff | Wait | Rotate | Land
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//And
		public RuleCall getAndParserRuleCall_0() { return cAndParserRuleCall_0; }
		
		//RefPart
		public RuleCall getRefPartParserRuleCall_1() { return cRefPartParserRuleCall_1; }
		
		//RefPartLib
		public RuleCall getRefPartLibParserRuleCall_2() { return cRefPartLibParserRuleCall_2; }
		
		//DepX_Impl
		public RuleCall getDepX_ImplParserRuleCall_3() { return cDepX_ImplParserRuleCall_3; }
		
		//DepY_Impl
		public RuleCall getDepY_ImplParserRuleCall_4() { return cDepY_ImplParserRuleCall_4; }
		
		//DepZ_Impl
		public RuleCall getDepZ_ImplParserRuleCall_5() { return cDepZ_ImplParserRuleCall_5; }
		
		//DepXY_IMPL
		public RuleCall getDepXY_IMPLParserRuleCall_6() { return cDepXY_IMPLParserRuleCall_6; }
		
		//DepXZ_IMPL
		public RuleCall getDepXZ_IMPLParserRuleCall_7() { return cDepXZ_IMPLParserRuleCall_7; }
		
		//DepYZ_IMPL
		public RuleCall getDepYZ_IMPLParserRuleCall_8() { return cDepYZ_IMPLParserRuleCall_8; }
		
		//DepXYZ_IMPL
		public RuleCall getDepXYZ_IMPLParserRuleCall_9() { return cDepXYZ_IMPLParserRuleCall_9; }
		
		//TakeOff
		public RuleCall getTakeOffParserRuleCall_10() { return cTakeOffParserRuleCall_10; }
		
		//Wait
		public RuleCall getWaitParserRuleCall_11() { return cWaitParserRuleCall_11; }
		
		//Rotate
		public RuleCall getRotateParserRuleCall_12() { return cRotateParserRuleCall_12; }
		
		//Land
		public RuleCall getLandParserRuleCall_13() { return cLandParserRuleCall_13; }
	}
	public class RefPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sar.drone.Drn.RefPart");
		private final Assignment cVariable_partieAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cVariable_partieAssignementCrossReference_0 = (CrossReference)cVariable_partieAssignment.eContents().get(0);
		private final RuleCall cVariable_partieAssignementIDTerminalRuleCall_0_1 = (RuleCall)cVariable_partieAssignementCrossReference_0.eContents().get(1);
		
		//RefPart:
		//	variable_partie=[Assignement];
		@Override public ParserRule getRule() { return rule; }
		
		//variable_partie=[Assignement]
		public Assignment getVariable_partieAssignment() { return cVariable_partieAssignment; }
		
		//[Assignement]
		public CrossReference getVariable_partieAssignementCrossReference_0() { return cVariable_partieAssignementCrossReference_0; }
		
		//ID
		public RuleCall getVariable_partieAssignementIDTerminalRuleCall_0_1() { return cVariable_partieAssignementIDTerminalRuleCall_0_1; }
	}
	public class RefPartLibElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sar.drone.Drn.RefPartLib");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLibsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cLibsLibraryCrossReference_0_0 = (CrossReference)cLibsAssignment_0.eContents().get(0);
		private final RuleCall cLibsLibraryIDTerminalRuleCall_0_0_1 = (RuleCall)cLibsLibraryCrossReference_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAssignementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cAssignementsAssignementCrossReference_2_0 = (CrossReference)cAssignementsAssignment_2.eContents().get(0);
		private final RuleCall cAssignementsAssignementIDTerminalRuleCall_2_0_1 = (RuleCall)cAssignementsAssignementCrossReference_2_0.eContents().get(1);
		
		//RefPartLib:
		//	libs=[Library] '.' assignements=[Assignement];
		@Override public ParserRule getRule() { return rule; }
		
		//libs=[Library] '.' assignements=[Assignement]
		public Group getGroup() { return cGroup; }
		
		//libs=[Library]
		public Assignment getLibsAssignment_0() { return cLibsAssignment_0; }
		
		//[Library]
		public CrossReference getLibsLibraryCrossReference_0_0() { return cLibsLibraryCrossReference_0_0; }
		
		//ID
		public RuleCall getLibsLibraryIDTerminalRuleCall_0_0_1() { return cLibsLibraryIDTerminalRuleCall_0_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//assignements=[Assignement]
		public Assignment getAssignementsAssignment_2() { return cAssignementsAssignment_2; }
		
		//[Assignement]
		public CrossReference getAssignementsAssignementCrossReference_2_0() { return cAssignementsAssignementCrossReference_2_0; }
		
		//ID
		public RuleCall getAssignementsAssignementIDTerminalRuleCall_2_0_1() { return cAssignementsAssignementIDTerminalRuleCall_2_0_1; }
	}
	public class AndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sar.drone.Drn.And");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAndAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cNameMergeKeyword_1_0 = (Keyword)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cRotateAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cRotateRotateParserRuleCall_3_0_0 = (RuleCall)cRotateAssignment_3_0.eContents().get(0);
		private final Assignment cDepxAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cDepxDepX_ImplParserRuleCall_3_1_0 = (RuleCall)cDepxAssignment_3_1.eContents().get(0);
		private final Assignment cDepyAssignment_3_2 = (Assignment)cAlternatives_3.eContents().get(2);
		private final RuleCall cDepyDepY_ImplParserRuleCall_3_2_0 = (RuleCall)cDepyAssignment_3_2.eContents().get(0);
		private final Assignment cDepzAssignment_3_3 = (Assignment)cAlternatives_3.eContents().get(3);
		private final RuleCall cDepzDepZ_ImplParserRuleCall_3_3_0 = (RuleCall)cDepzAssignment_3_3.eContents().get(0);
		private final Assignment cDepxzAssignment_3_4 = (Assignment)cAlternatives_3.eContents().get(4);
		private final RuleCall cDepxzDepXZ_IMPLParserRuleCall_3_4_0 = (RuleCall)cDepxzAssignment_3_4.eContents().get(0);
		private final Assignment cDepxyAssignment_3_5 = (Assignment)cAlternatives_3.eContents().get(5);
		private final RuleCall cDepxyDepXY_IMPLParserRuleCall_3_5_0 = (RuleCall)cDepxyAssignment_3_5.eContents().get(0);
		private final Assignment cDepyzAssignment_3_6 = (Assignment)cAlternatives_3.eContents().get(6);
		private final RuleCall cDepyzDepYZ_IMPLParserRuleCall_3_6_0 = (RuleCall)cDepyzAssignment_3_6.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Assignment cRotateAssignment_5_0 = (Assignment)cAlternatives_5.eContents().get(0);
		private final RuleCall cRotateRotateParserRuleCall_5_0_0 = (RuleCall)cRotateAssignment_5_0.eContents().get(0);
		private final Assignment cDepxAssignment_5_1 = (Assignment)cAlternatives_5.eContents().get(1);
		private final RuleCall cDepxDepX_ImplParserRuleCall_5_1_0 = (RuleCall)cDepxAssignment_5_1.eContents().get(0);
		private final Assignment cDepyAssignment_5_2 = (Assignment)cAlternatives_5.eContents().get(2);
		private final RuleCall cDepyDepY_ImplParserRuleCall_5_2_0 = (RuleCall)cDepyAssignment_5_2.eContents().get(0);
		private final Assignment cDepzAssignment_5_3 = (Assignment)cAlternatives_5.eContents().get(3);
		private final RuleCall cDepzDepZ_ImplParserRuleCall_5_3_0 = (RuleCall)cDepzAssignment_5_3.eContents().get(0);
		private final Assignment cDepxzAssignment_5_4 = (Assignment)cAlternatives_5.eContents().get(4);
		private final RuleCall cDepxzDepXZ_IMPLParserRuleCall_5_4_0 = (RuleCall)cDepxzAssignment_5_4.eContents().get(0);
		private final Assignment cDepxyAssignment_5_5 = (Assignment)cAlternatives_5.eContents().get(5);
		private final RuleCall cDepxyDepXY_IMPLParserRuleCall_5_5_0 = (RuleCall)cDepxyAssignment_5_5.eContents().get(0);
		private final Assignment cDepyzAssignment_5_6 = (Assignment)cAlternatives_5.eContents().get(6);
		private final RuleCall cDepyzDepYZ_IMPLParserRuleCall_5_6_0 = (RuleCall)cDepyzAssignment_5_6.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cCommaKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Alternatives cAlternatives_6_1 = (Alternatives)cGroup_6.eContents().get(1);
		private final Assignment cRotateAssignment_6_1_0 = (Assignment)cAlternatives_6_1.eContents().get(0);
		private final RuleCall cRotateRotateParserRuleCall_6_1_0_0 = (RuleCall)cRotateAssignment_6_1_0.eContents().get(0);
		private final Assignment cDepxAssignment_6_1_1 = (Assignment)cAlternatives_6_1.eContents().get(1);
		private final RuleCall cDepxDepX_ImplParserRuleCall_6_1_1_0 = (RuleCall)cDepxAssignment_6_1_1.eContents().get(0);
		private final Assignment cDepyAssignment_6_1_2 = (Assignment)cAlternatives_6_1.eContents().get(2);
		private final RuleCall cDepyDepY_ImplParserRuleCall_6_1_2_0 = (RuleCall)cDepyAssignment_6_1_2.eContents().get(0);
		private final Assignment cDepzAssignment_6_1_3 = (Assignment)cAlternatives_6_1.eContents().get(3);
		private final RuleCall cDepzDepZ_ImplParserRuleCall_6_1_3_0 = (RuleCall)cDepzAssignment_6_1_3.eContents().get(0);
		private final Assignment cDepxzAssignment_6_1_4 = (Assignment)cAlternatives_6_1.eContents().get(4);
		private final RuleCall cDepxzDepXZ_IMPLParserRuleCall_6_1_4_0 = (RuleCall)cDepxzAssignment_6_1_4.eContents().get(0);
		private final Assignment cDepxyAssignment_6_1_5 = (Assignment)cAlternatives_6_1.eContents().get(5);
		private final RuleCall cDepxyDepXY_IMPLParserRuleCall_6_1_5_0 = (RuleCall)cDepxyAssignment_6_1_5.eContents().get(0);
		private final Assignment cDepyzAssignment_6_1_6 = (Assignment)cAlternatives_6_1.eContents().get(6);
		private final RuleCall cDepyzDepYZ_IMPLParserRuleCall_6_1_6_0 = (RuleCall)cDepyzAssignment_6_1_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//And:
		//	{And} name='merge' '(' (rotate+=Rotate | depx+=DepX_Impl | depy+=DepY_Impl | depz+=DepZ_Impl | depxz+=DepXZ_IMPL |
		//	depxy+=DepXY_IMPL | depyz+=DepYZ_IMPL) ',' (rotate+=Rotate | depx+=DepX_Impl | depy+=DepY_Impl | depz+=DepZ_Impl |
		//	depxz+=DepXZ_IMPL | depxy+=DepXY_IMPL | depyz+=DepYZ_IMPL) (',' (rotate+=Rotate | depx+=DepX_Impl | depy+=DepY_Impl |
		//	depz+=DepZ_Impl | depxz+=DepXZ_IMPL | depxy+=DepXY_IMPL | depyz+=DepYZ_IMPL))*
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//{And} name='merge' '(' (rotate+=Rotate | depx+=DepX_Impl | depy+=DepY_Impl | depz+=DepZ_Impl | depxz+=DepXZ_IMPL |
		//depxy+=DepXY_IMPL | depyz+=DepYZ_IMPL) ',' (rotate+=Rotate | depx+=DepX_Impl | depy+=DepY_Impl | depz+=DepZ_Impl |
		//depxz+=DepXZ_IMPL | depxy+=DepXY_IMPL | depyz+=DepYZ_IMPL) (',' (rotate+=Rotate | depx+=DepX_Impl | depy+=DepY_Impl |
		//depz+=DepZ_Impl | depxz+=DepXZ_IMPL | depxy+=DepXY_IMPL | depyz+=DepYZ_IMPL))* ')'
		public Group getGroup() { return cGroup; }
		
		//{And}
		public Action getAndAction_0() { return cAndAction_0; }
		
		//name='merge'
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//'merge'
		public Keyword getNameMergeKeyword_1_0() { return cNameMergeKeyword_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//(rotate+=Rotate | depx+=DepX_Impl | depy+=DepY_Impl | depz+=DepZ_Impl | depxz+=DepXZ_IMPL | depxy+=DepXY_IMPL |
		//depyz+=DepYZ_IMPL)
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//rotate+=Rotate
		public Assignment getRotateAssignment_3_0() { return cRotateAssignment_3_0; }
		
		//Rotate
		public RuleCall getRotateRotateParserRuleCall_3_0_0() { return cRotateRotateParserRuleCall_3_0_0; }
		
		//depx+=DepX_Impl
		public Assignment getDepxAssignment_3_1() { return cDepxAssignment_3_1; }
		
		//DepX_Impl
		public RuleCall getDepxDepX_ImplParserRuleCall_3_1_0() { return cDepxDepX_ImplParserRuleCall_3_1_0; }
		
		//depy+=DepY_Impl
		public Assignment getDepyAssignment_3_2() { return cDepyAssignment_3_2; }
		
		//DepY_Impl
		public RuleCall getDepyDepY_ImplParserRuleCall_3_2_0() { return cDepyDepY_ImplParserRuleCall_3_2_0; }
		
		//depz+=DepZ_Impl
		public Assignment getDepzAssignment_3_3() { return cDepzAssignment_3_3; }
		
		//DepZ_Impl
		public RuleCall getDepzDepZ_ImplParserRuleCall_3_3_0() { return cDepzDepZ_ImplParserRuleCall_3_3_0; }
		
		//depxz+=DepXZ_IMPL
		public Assignment getDepxzAssignment_3_4() { return cDepxzAssignment_3_4; }
		
		//DepXZ_IMPL
		public RuleCall getDepxzDepXZ_IMPLParserRuleCall_3_4_0() { return cDepxzDepXZ_IMPLParserRuleCall_3_4_0; }
		
		//depxy+=DepXY_IMPL
		public Assignment getDepxyAssignment_3_5() { return cDepxyAssignment_3_5; }
		
		//DepXY_IMPL
		public RuleCall getDepxyDepXY_IMPLParserRuleCall_3_5_0() { return cDepxyDepXY_IMPLParserRuleCall_3_5_0; }
		
		//depyz+=DepYZ_IMPL
		public Assignment getDepyzAssignment_3_6() { return cDepyzAssignment_3_6; }
		
		//DepYZ_IMPL
		public RuleCall getDepyzDepYZ_IMPLParserRuleCall_3_6_0() { return cDepyzDepYZ_IMPLParserRuleCall_3_6_0; }
		
		//','
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//(rotate+=Rotate | depx+=DepX_Impl | depy+=DepY_Impl | depz+=DepZ_Impl | depxz+=DepXZ_IMPL | depxy+=DepXY_IMPL |
		//depyz+=DepYZ_IMPL)
		public Alternatives getAlternatives_5() { return cAlternatives_5; }
		
		//rotate+=Rotate
		public Assignment getRotateAssignment_5_0() { return cRotateAssignment_5_0; }
		
		//Rotate
		public RuleCall getRotateRotateParserRuleCall_5_0_0() { return cRotateRotateParserRuleCall_5_0_0; }
		
		//depx+=DepX_Impl
		public Assignment getDepxAssignment_5_1() { return cDepxAssignment_5_1; }
		
		//DepX_Impl
		public RuleCall getDepxDepX_ImplParserRuleCall_5_1_0() { return cDepxDepX_ImplParserRuleCall_5_1_0; }
		
		//depy+=DepY_Impl
		public Assignment getDepyAssignment_5_2() { return cDepyAssignment_5_2; }
		
		//DepY_Impl
		public RuleCall getDepyDepY_ImplParserRuleCall_5_2_0() { return cDepyDepY_ImplParserRuleCall_5_2_0; }
		
		//depz+=DepZ_Impl
		public Assignment getDepzAssignment_5_3() { return cDepzAssignment_5_3; }
		
		//DepZ_Impl
		public RuleCall getDepzDepZ_ImplParserRuleCall_5_3_0() { return cDepzDepZ_ImplParserRuleCall_5_3_0; }
		
		//depxz+=DepXZ_IMPL
		public Assignment getDepxzAssignment_5_4() { return cDepxzAssignment_5_4; }
		
		//DepXZ_IMPL
		public RuleCall getDepxzDepXZ_IMPLParserRuleCall_5_4_0() { return cDepxzDepXZ_IMPLParserRuleCall_5_4_0; }
		
		//depxy+=DepXY_IMPL
		public Assignment getDepxyAssignment_5_5() { return cDepxyAssignment_5_5; }
		
		//DepXY_IMPL
		public RuleCall getDepxyDepXY_IMPLParserRuleCall_5_5_0() { return cDepxyDepXY_IMPLParserRuleCall_5_5_0; }
		
		//depyz+=DepYZ_IMPL
		public Assignment getDepyzAssignment_5_6() { return cDepyzAssignment_5_6; }
		
		//DepYZ_IMPL
		public RuleCall getDepyzDepYZ_IMPLParserRuleCall_5_6_0() { return cDepyzDepYZ_IMPLParserRuleCall_5_6_0; }
		
		//(',' (rotate+=Rotate | depx+=DepX_Impl | depy+=DepY_Impl | depz+=DepZ_Impl | depxz+=DepXZ_IMPL | depxy+=DepXY_IMPL |
		//depyz+=DepYZ_IMPL))*
		public Group getGroup_6() { return cGroup_6; }
		
		//','
		public Keyword getCommaKeyword_6_0() { return cCommaKeyword_6_0; }
		
		//(rotate+=Rotate | depx+=DepX_Impl | depy+=DepY_Impl | depz+=DepZ_Impl | depxz+=DepXZ_IMPL | depxy+=DepXY_IMPL |
		//depyz+=DepYZ_IMPL)
		public Alternatives getAlternatives_6_1() { return cAlternatives_6_1; }
		
		//rotate+=Rotate
		public Assignment getRotateAssignment_6_1_0() { return cRotateAssignment_6_1_0; }
		
		//Rotate
		public RuleCall getRotateRotateParserRuleCall_6_1_0_0() { return cRotateRotateParserRuleCall_6_1_0_0; }
		
		//depx+=DepX_Impl
		public Assignment getDepxAssignment_6_1_1() { return cDepxAssignment_6_1_1; }
		
		//DepX_Impl
		public RuleCall getDepxDepX_ImplParserRuleCall_6_1_1_0() { return cDepxDepX_ImplParserRuleCall_6_1_1_0; }
		
		//depy+=DepY_Impl
		public Assignment getDepyAssignment_6_1_2() { return cDepyAssignment_6_1_2; }
		
		//DepY_Impl
		public RuleCall getDepyDepY_ImplParserRuleCall_6_1_2_0() { return cDepyDepY_ImplParserRuleCall_6_1_2_0; }
		
		//depz+=DepZ_Impl
		public Assignment getDepzAssignment_6_1_3() { return cDepzAssignment_6_1_3; }
		
		//DepZ_Impl
		public RuleCall getDepzDepZ_ImplParserRuleCall_6_1_3_0() { return cDepzDepZ_ImplParserRuleCall_6_1_3_0; }
		
		//depxz+=DepXZ_IMPL
		public Assignment getDepxzAssignment_6_1_4() { return cDepxzAssignment_6_1_4; }
		
		//DepXZ_IMPL
		public RuleCall getDepxzDepXZ_IMPLParserRuleCall_6_1_4_0() { return cDepxzDepXZ_IMPLParserRuleCall_6_1_4_0; }
		
		//depxy+=DepXY_IMPL
		public Assignment getDepxyAssignment_6_1_5() { return cDepxyAssignment_6_1_5; }
		
		//DepXY_IMPL
		public RuleCall getDepxyDepXY_IMPLParserRuleCall_6_1_5_0() { return cDepxyDepXY_IMPLParserRuleCall_6_1_5_0; }
		
		//depyz+=DepYZ_IMPL
		public Assignment getDepyzAssignment_6_1_6() { return cDepyzAssignment_6_1_6; }
		
		//DepYZ_IMPL
		public RuleCall getDepyzDepYZ_IMPLParserRuleCall_6_1_6_0() { return cDepyzDepYZ_IMPLParserRuleCall_6_1_6_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}
	public class DepY_ImplElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sar.drone.Drn.DepY_Impl");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFORWARDParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBACKWARDParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		/// ******************* Action ********************* / DepY_Impl:
		//	FORWARD | BACKWARD;
		@Override public ParserRule getRule() { return rule; }
		
		//FORWARD | BACKWARD
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FORWARD
		public RuleCall getFORWARDParserRuleCall_0() { return cFORWARDParserRuleCall_0; }
		
		//BACKWARD
		public RuleCall getBACKWARDParserRuleCall_1() { return cBACKWARDParserRuleCall_1; }
	}
	public class FORWARDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sar.drone.Drn.FORWARD");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameForwardKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cDistanceKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDistanceCSTAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDistanceCSTINTTerminalRuleCall_4_0 = (RuleCall)cDistanceCSTAssignment_4.eContents().get(0);
		private final Keyword cTempsKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cEqualsSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cTempsCSTAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cTempsCSTINTTerminalRuleCall_7_0 = (RuleCall)cTempsCSTAssignment_7.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//FORWARD:
		//	name="forward" '('
		//	'distance' '=' distanceCST=INT
		//	'temps' '=' tempsCST=INT
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//name="forward" '(' 'distance' '=' distanceCST=INT 'temps' '=' tempsCST=INT ')'
		public Group getGroup() { return cGroup; }
		
		//name="forward"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//"forward"
		public Keyword getNameForwardKeyword_0_0() { return cNameForwardKeyword_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//'distance'
		public Keyword getDistanceKeyword_2() { return cDistanceKeyword_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//distanceCST=INT
		public Assignment getDistanceCSTAssignment_4() { return cDistanceCSTAssignment_4; }
		
		//INT
		public RuleCall getDistanceCSTINTTerminalRuleCall_4_0() { return cDistanceCSTINTTerminalRuleCall_4_0; }
		
		//'temps'
		public Keyword getTempsKeyword_5() { return cTempsKeyword_5; }
		
		//'='
		public Keyword getEqualsSignKeyword_6() { return cEqualsSignKeyword_6; }
		
		//tempsCST=INT
		public Assignment getTempsCSTAssignment_7() { return cTempsCSTAssignment_7; }
		
		//INT
		public RuleCall getTempsCSTINTTerminalRuleCall_7_0() { return cTempsCSTINTTerminalRuleCall_7_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }
	}
	public class BACKWARDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sar.drone.Drn.BACKWARD");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameBackwardKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cDistanceKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDistanceCSTAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDistanceCSTINTTerminalRuleCall_4_0 = (RuleCall)cDistanceCSTAssignment_4.eContents().get(0);
		private final Keyword cTempsKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cEqualsSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cTempsCSTAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cTempsCSTINTTerminalRuleCall_7_0 = (RuleCall)cTempsCSTAssignment_7.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//BACKWARD:
		//	name="backward" '('
		//	'distance' '=' distanceCST=INT
		//	'temps' '=' tempsCST=INT
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//name="backward" '(' 'distance' '=' distanceCST=INT 'temps' '=' tempsCST=INT ')'
		public Group getGroup() { return cGroup; }
		
		//name="backward"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//"backward"
		public Keyword getNameBackwardKeyword_0_0() { return cNameBackwardKeyword_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//'distance'
		public Keyword getDistanceKeyword_2() { return cDistanceKeyword_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//distanceCST=INT
		public Assignment getDistanceCSTAssignment_4() { return cDistanceCSTAssignment_4; }
		
		//INT
		public RuleCall getDistanceCSTINTTerminalRuleCall_4_0() { return cDistanceCSTINTTerminalRuleCall_4_0; }
		
		//'temps'
		public Keyword getTempsKeyword_5() { return cTempsKeyword_5; }
		
		//'='
		public Keyword getEqualsSignKeyword_6() { return cEqualsSignKeyword_6; }
		
		//tempsCST=INT
		public Assignment getTempsCSTAssignment_7() { return cTempsCSTAssignment_7; }
		
		//INT
		public RuleCall getTempsCSTINTTerminalRuleCall_7_0() { return cTempsCSTINTTerminalRuleCall_7_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }
	}
	public class DepX_ImplElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sar.drone.Drn.DepX_Impl");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLEFTParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRIGHTParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//DepX_Impl:
		//	LEFT | RIGHT;
		@Override public ParserRule getRule() { return rule; }
		
		//LEFT | RIGHT
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LEFT
		public RuleCall getLEFTParserRuleCall_0() { return cLEFTParserRuleCall_0; }
		
		//RIGHT
		public RuleCall getRIGHTParserRuleCall_1() { return cRIGHTParserRuleCall_1; }
	}
	public class LEFTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sar.drone.Drn.LEFT");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameLeftKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cDistanceKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDistanceCSTAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDistanceCSTINTTerminalRuleCall_4_0 = (RuleCall)cDistanceCSTAssignment_4.eContents().get(0);
		private final Keyword cTempsKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cEqualsSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cTempsCSTAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cTempsCSTINTTerminalRuleCall_7_0 = (RuleCall)cTempsCSTAssignment_7.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//LEFT:
		//	name="left" '('
		//	'distance' '=' distanceCST=INT
		//	'temps' '=' tempsCST=INT
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//name="left" '(' 'distance' '=' distanceCST=INT 'temps' '=' tempsCST=INT ')'
		public Group getGroup() { return cGroup; }
		
		//name="left"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//"left"
		public Keyword getNameLeftKeyword_0_0() { return cNameLeftKeyword_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//'distance'
		public Keyword getDistanceKeyword_2() { return cDistanceKeyword_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//distanceCST=INT
		public Assignment getDistanceCSTAssignment_4() { return cDistanceCSTAssignment_4; }
		
		//INT
		public RuleCall getDistanceCSTINTTerminalRuleCall_4_0() { return cDistanceCSTINTTerminalRuleCall_4_0; }
		
		//'temps'
		public Keyword getTempsKeyword_5() { return cTempsKeyword_5; }
		
		//'='
		public Keyword getEqualsSignKeyword_6() { return cEqualsSignKeyword_6; }
		
		//tempsCST=INT
		public Assignment getTempsCSTAssignment_7() { return cTempsCSTAssignment_7; }
		
		//INT
		public RuleCall getTempsCSTINTTerminalRuleCall_7_0() { return cTempsCSTINTTerminalRuleCall_7_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }
	}
	public class RIGHTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sar.drone.Drn.RIGHT");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameRightKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cDistanceKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDistanceCSTAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDistanceCSTINTTerminalRuleCall_4_0 = (RuleCall)cDistanceCSTAssignment_4.eContents().get(0);
		private final Keyword cTempsKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cEqualsSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cTempsCSTAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cTempsCSTINTTerminalRuleCall_7_0 = (RuleCall)cTempsCSTAssignment_7.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//RIGHT:
		//	name="right" '('
		//	'distance' '=' distanceCST=INT
		//	'temps' '=' tempsCST=INT
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//name="right" '(' 'distance' '=' distanceCST=INT 'temps' '=' tempsCST=INT ')'
		public Group getGroup() { return cGroup; }
		
		//name="right"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//"right"
		public Keyword getNameRightKeyword_0_0() { return cNameRightKeyword_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//'distance'
		public Keyword getDistanceKeyword_2() { return cDistanceKeyword_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//distanceCST=INT
		public Assignment getDistanceCSTAssignment_4() { return cDistanceCSTAssignment_4; }
		
		//INT
		public RuleCall getDistanceCSTINTTerminalRuleCall_4_0() { return cDistanceCSTINTTerminalRuleCall_4_0; }
		
		//'temps'
		public Keyword getTempsKeyword_5() { return cTempsKeyword_5; }
		
		//'='
		public Keyword getEqualsSignKeyword_6() { return cEqualsSignKeyword_6; }
		
		//tempsCST=INT
		public Assignment getTempsCSTAssignment_7() { return cTempsCSTAssignment_7; }
		
		//INT
		public RuleCall getTempsCSTINTTerminalRuleCall_7_0() { return cTempsCSTINTTerminalRuleCall_7_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }
	}
	public class DepZ_ImplElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sar.drone.Drn.DepZ_Impl");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cUPParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDOWNParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//DepZ_Impl:
		//	UP | DOWN;
		@Override public ParserRule getRule() { return rule; }
		
		//UP | DOWN
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//UP
		public RuleCall getUPParserRuleCall_0() { return cUPParserRuleCall_0; }
		
		//DOWN
		public RuleCall getDOWNParserRuleCall_1() { return cDOWNParserRuleCall_1; }
	}
	public class UPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sar.drone.Drn.UP");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameUpKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cDistanceKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDistanceCSTAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDistanceCSTINTTerminalRuleCall_4_0 = (RuleCall)cDistanceCSTAssignment_4.eContents().get(0);
		private final Keyword cTempsKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cEqualsSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cTempsCSTAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cTempsCSTINTTerminalRuleCall_7_0 = (RuleCall)cTempsCSTAssignment_7.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//UP:
		//	name="up" '('
		//	'distance' '=' distanceCST=INT
		//	'temps' '=' tempsCST=INT
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//name="up" '(' 'distance' '=' distanceCST=INT 'temps' '=' tempsCST=INT ')'
		public Group getGroup() { return cGroup; }
		
		//name="up"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//"up"
		public Keyword getNameUpKeyword_0_0() { return cNameUpKeyword_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//'distance'
		public Keyword getDistanceKeyword_2() { return cDistanceKeyword_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//distanceCST=INT
		public Assignment getDistanceCSTAssignment_4() { return cDistanceCSTAssignment_4; }
		
		//INT
		public RuleCall getDistanceCSTINTTerminalRuleCall_4_0() { return cDistanceCSTINTTerminalRuleCall_4_0; }
		
		//'temps'
		public Keyword getTempsKeyword_5() { return cTempsKeyword_5; }
		
		//'='
		public Keyword getEqualsSignKeyword_6() { return cEqualsSignKeyword_6; }
		
		//tempsCST=INT
		public Assignment getTempsCSTAssignment_7() { return cTempsCSTAssignment_7; }
		
		//INT
		public RuleCall getTempsCSTINTTerminalRuleCall_7_0() { return cTempsCSTINTTerminalRuleCall_7_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }
	}
	public class DOWNElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sar.drone.Drn.DOWN");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameDownKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cDistanceKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDistanceCSTAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDistanceCSTINTTerminalRuleCall_4_0 = (RuleCall)cDistanceCSTAssignment_4.eContents().get(0);
		private final Keyword cTempsKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cEqualsSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cTempsCSTAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cTempsCSTINTTerminalRuleCall_7_0 = (RuleCall)cTempsCSTAssignment_7.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//DOWN:
		//	name="down" '('
		//	'distance' '=' distanceCST=INT
		//	'temps' '=' tempsCST=INT
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//name="down" '(' 'distance' '=' distanceCST=INT 'temps' '=' tempsCST=INT ')'
		public Group getGroup() { return cGroup; }
		
		//name="down"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//"down"
		public Keyword getNameDownKeyword_0_0() { return cNameDownKeyword_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//'distance'
		public Keyword getDistanceKeyword_2() { return cDistanceKeyword_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//distanceCST=INT
		public Assignment getDistanceCSTAssignment_4() { return cDistanceCSTAssignment_4; }
		
		//INT
		public RuleCall getDistanceCSTINTTerminalRuleCall_4_0() { return cDistanceCSTINTTerminalRuleCall_4_0; }
		
		//'temps'
		public Keyword getTempsKeyword_5() { return cTempsKeyword_5; }
		
		//'='
		public Keyword getEqualsSignKeyword_6() { return cEqualsSignKeyword_6; }
		
		//tempsCST=INT
		public Assignment getTempsCSTAssignment_7() { return cTempsCSTAssignment_7; }
		
		//INT
		public RuleCall getTempsCSTINTTerminalRuleCall_7_0() { return cTempsCSTINTTerminalRuleCall_7_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }
	}
	public class DepXY_IMPLElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sar.drone.Drn.DepXY_IMPL");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCERCLEXYParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCARREXYParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//DepXY_IMPL:
		//	CERCLEXY | CARREXY;
		@Override public ParserRule getRule() { return rule; }
		
		//CERCLEXY | CARREXY
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//CERCLEXY
		public RuleCall getCERCLEXYParserRuleCall_0() { return cCERCLEXYParserRuleCall_0; }
		
		//CARREXY
		public RuleCall getCARREXYParserRuleCall_1() { return cCARREXYParserRuleCall_1; }
	}
	public class CERCLEXYElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sar.drone.Drn.CERCLEXY");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameCercleXYKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cRayonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRayonCSTAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRayonCSTINTTerminalRuleCall_4_0 = (RuleCall)cRayonCSTAssignment_4.eContents().get(0);
		private final Keyword cTempsKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cEqualsSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cTempsCSTAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cTempsCSTINTTerminalRuleCall_7_0 = (RuleCall)cTempsCSTAssignment_7.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//CERCLEXY:
		//	name="cercleXY" '('
		//	'rayon' '=' rayonCST=INT
		//	'temps' '=' tempsCST=INT
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//name="cercleXY" '(' 'rayon' '=' rayonCST=INT 'temps' '=' tempsCST=INT ')'
		public Group getGroup() { return cGroup; }
		
		//name="cercleXY"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//"cercleXY"
		public Keyword getNameCercleXYKeyword_0_0() { return cNameCercleXYKeyword_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//'rayon'
		public Keyword getRayonKeyword_2() { return cRayonKeyword_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//rayonCST=INT
		public Assignment getRayonCSTAssignment_4() { return cRayonCSTAssignment_4; }
		
		//INT
		public RuleCall getRayonCSTINTTerminalRuleCall_4_0() { return cRayonCSTINTTerminalRuleCall_4_0; }
		
		//'temps'
		public Keyword getTempsKeyword_5() { return cTempsKeyword_5; }
		
		//'='
		public Keyword getEqualsSignKeyword_6() { return cEqualsSignKeyword_6; }
		
		//tempsCST=INT
		public Assignment getTempsCSTAssignment_7() { return cTempsCSTAssignment_7; }
		
		//INT
		public RuleCall getTempsCSTINTTerminalRuleCall_7_0() { return cTempsCSTINTTerminalRuleCall_7_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }
	}
	public class CARREXYElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sar.drone.Drn.CARREXY");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameCarreXYKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cCoteKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cCoteCSTAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cCoteCSTINTTerminalRuleCall_4_0 = (RuleCall)cCoteCSTAssignment_4.eContents().get(0);
		private final Keyword cTempsKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cEqualsSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cTempsCSTAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cTempsCSTINTTerminalRuleCall_7_0 = (RuleCall)cTempsCSTAssignment_7.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//CARREXY:
		//	name="carreXY" '('
		//	'cote' '=' coteCST=INT
		//	'temps' '=' tempsCST=INT
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//name="carreXY" '(' 'cote' '=' coteCST=INT 'temps' '=' tempsCST=INT ')'
		public Group getGroup() { return cGroup; }
		
		//name="carreXY"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//"carreXY"
		public Keyword getNameCarreXYKeyword_0_0() { return cNameCarreXYKeyword_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//'cote'
		public Keyword getCoteKeyword_2() { return cCoteKeyword_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//coteCST=INT
		public Assignment getCoteCSTAssignment_4() { return cCoteCSTAssignment_4; }
		
		//INT
		public RuleCall getCoteCSTINTTerminalRuleCall_4_0() { return cCoteCSTINTTerminalRuleCall_4_0; }
		
		//'temps'
		public Keyword getTempsKeyword_5() { return cTempsKeyword_5; }
		
		//'='
		public Keyword getEqualsSignKeyword_6() { return cEqualsSignKeyword_6; }
		
		//tempsCST=INT
		public Assignment getTempsCSTAssignment_7() { return cTempsCSTAssignment_7; }
		
		//INT
		public RuleCall getTempsCSTINTTerminalRuleCall_7_0() { return cTempsCSTINTTerminalRuleCall_7_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }
	}
	public class DepYZ_IMPLElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sar.drone.Drn.DepYZ_IMPL");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCERCLEYZParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCARREYZParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//DepYZ_IMPL:
		//	CERCLEYZ | CARREYZ;
		@Override public ParserRule getRule() { return rule; }
		
		//CERCLEYZ | CARREYZ
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//CERCLEYZ
		public RuleCall getCERCLEYZParserRuleCall_0() { return cCERCLEYZParserRuleCall_0; }
		
		//CARREYZ
		public RuleCall getCARREYZParserRuleCall_1() { return cCARREYZParserRuleCall_1; }
	}
	public class CERCLEYZElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sar.drone.Drn.CERCLEYZ");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameCercleYZKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cRayonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRayonCSTAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRayonCSTINTTerminalRuleCall_4_0 = (RuleCall)cRayonCSTAssignment_4.eContents().get(0);
		private final Keyword cTempsKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cEqualsSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cTempsCSTAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cTempsCSTINTTerminalRuleCall_7_0 = (RuleCall)cTempsCSTAssignment_7.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//CERCLEYZ:
		//	name="cercleYZ" '('
		//	'rayon' '=' rayonCST=INT
		//	'temps' '=' tempsCST=INT
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//name="cercleYZ" '(' 'rayon' '=' rayonCST=INT 'temps' '=' tempsCST=INT ')'
		public Group getGroup() { return cGroup; }
		
		//name="cercleYZ"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//"cercleYZ"
		public Keyword getNameCercleYZKeyword_0_0() { return cNameCercleYZKeyword_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//'rayon'
		public Keyword getRayonKeyword_2() { return cRayonKeyword_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//rayonCST=INT
		public Assignment getRayonCSTAssignment_4() { return cRayonCSTAssignment_4; }
		
		//INT
		public RuleCall getRayonCSTINTTerminalRuleCall_4_0() { return cRayonCSTINTTerminalRuleCall_4_0; }
		
		//'temps'
		public Keyword getTempsKeyword_5() { return cTempsKeyword_5; }
		
		//'='
		public Keyword getEqualsSignKeyword_6() { return cEqualsSignKeyword_6; }
		
		//tempsCST=INT
		public Assignment getTempsCSTAssignment_7() { return cTempsCSTAssignment_7; }
		
		//INT
		public RuleCall getTempsCSTINTTerminalRuleCall_7_0() { return cTempsCSTINTTerminalRuleCall_7_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }
	}
	public class CARREYZElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sar.drone.Drn.CARREYZ");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameCarreYZKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cCoteKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cCoteCSTAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cCoteCSTINTTerminalRuleCall_4_0 = (RuleCall)cCoteCSTAssignment_4.eContents().get(0);
		private final Keyword cTempsKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cEqualsSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cTempsCSTAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cTempsCSTINTTerminalRuleCall_7_0 = (RuleCall)cTempsCSTAssignment_7.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//CARREYZ:
		//	name="carreYZ" '('
		//	'cote' '=' coteCST=INT
		//	'temps' '=' tempsCST=INT
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//name="carreYZ" '(' 'cote' '=' coteCST=INT 'temps' '=' tempsCST=INT ')'
		public Group getGroup() { return cGroup; }
		
		//name="carreYZ"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//"carreYZ"
		public Keyword getNameCarreYZKeyword_0_0() { return cNameCarreYZKeyword_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//'cote'
		public Keyword getCoteKeyword_2() { return cCoteKeyword_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//coteCST=INT
		public Assignment getCoteCSTAssignment_4() { return cCoteCSTAssignment_4; }
		
		//INT
		public RuleCall getCoteCSTINTTerminalRuleCall_4_0() { return cCoteCSTINTTerminalRuleCall_4_0; }
		
		//'temps'
		public Keyword getTempsKeyword_5() { return cTempsKeyword_5; }
		
		//'='
		public Keyword getEqualsSignKeyword_6() { return cEqualsSignKeyword_6; }
		
		//tempsCST=INT
		public Assignment getTempsCSTAssignment_7() { return cTempsCSTAssignment_7; }
		
		//INT
		public RuleCall getTempsCSTINTTerminalRuleCall_7_0() { return cTempsCSTINTTerminalRuleCall_7_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }
	}
	public class DepXZ_IMPLElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sar.drone.Drn.DepXZ_IMPL");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCERCLEXZParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCARREXZParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//DepXZ_IMPL:
		//	CERCLEXZ | CARREXZ;
		@Override public ParserRule getRule() { return rule; }
		
		//CERCLEXZ | CARREXZ
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//CERCLEXZ
		public RuleCall getCERCLEXZParserRuleCall_0() { return cCERCLEXZParserRuleCall_0; }
		
		//CARREXZ
		public RuleCall getCARREXZParserRuleCall_1() { return cCARREXZParserRuleCall_1; }
	}
	public class CERCLEXZElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sar.drone.Drn.CERCLEXZ");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameCercleXZKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cRayonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRayonCSTAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRayonCSTINTTerminalRuleCall_4_0 = (RuleCall)cRayonCSTAssignment_4.eContents().get(0);
		private final Keyword cTempsKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cEqualsSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cTempsCSTAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cTempsCSTINTTerminalRuleCall_7_0 = (RuleCall)cTempsCSTAssignment_7.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//CERCLEXZ:
		//	name="cercleXZ" '('
		//	'rayon' '=' rayonCST=INT
		//	'temps' '=' tempsCST=INT
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//name="cercleXZ" '(' 'rayon' '=' rayonCST=INT 'temps' '=' tempsCST=INT ')'
		public Group getGroup() { return cGroup; }
		
		//name="cercleXZ"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//"cercleXZ"
		public Keyword getNameCercleXZKeyword_0_0() { return cNameCercleXZKeyword_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//'rayon'
		public Keyword getRayonKeyword_2() { return cRayonKeyword_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//rayonCST=INT
		public Assignment getRayonCSTAssignment_4() { return cRayonCSTAssignment_4; }
		
		//INT
		public RuleCall getRayonCSTINTTerminalRuleCall_4_0() { return cRayonCSTINTTerminalRuleCall_4_0; }
		
		//'temps'
		public Keyword getTempsKeyword_5() { return cTempsKeyword_5; }
		
		//'='
		public Keyword getEqualsSignKeyword_6() { return cEqualsSignKeyword_6; }
		
		//tempsCST=INT
		public Assignment getTempsCSTAssignment_7() { return cTempsCSTAssignment_7; }
		
		//INT
		public RuleCall getTempsCSTINTTerminalRuleCall_7_0() { return cTempsCSTINTTerminalRuleCall_7_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }
	}
	public class CARREXZElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sar.drone.Drn.CARREXZ");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameCarreXZKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cCoteKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cCoteCSTAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cCoteCSTINTTerminalRuleCall_4_0 = (RuleCall)cCoteCSTAssignment_4.eContents().get(0);
		private final Keyword cTempsKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cEqualsSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cTempsCSTAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cTempsCSTINTTerminalRuleCall_7_0 = (RuleCall)cTempsCSTAssignment_7.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//CARREXZ:
		//	name="carreXZ" '('
		//	'cote' '=' coteCST=INT
		//	'temps' '=' tempsCST=INT
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//name="carreXZ" '(' 'cote' '=' coteCST=INT 'temps' '=' tempsCST=INT ')'
		public Group getGroup() { return cGroup; }
		
		//name="carreXZ"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//"carreXZ"
		public Keyword getNameCarreXZKeyword_0_0() { return cNameCarreXZKeyword_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//'cote'
		public Keyword getCoteKeyword_2() { return cCoteKeyword_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//coteCST=INT
		public Assignment getCoteCSTAssignment_4() { return cCoteCSTAssignment_4; }
		
		//INT
		public RuleCall getCoteCSTINTTerminalRuleCall_4_0() { return cCoteCSTINTTerminalRuleCall_4_0; }
		
		//'temps'
		public Keyword getTempsKeyword_5() { return cTempsKeyword_5; }
		
		//'='
		public Keyword getEqualsSignKeyword_6() { return cEqualsSignKeyword_6; }
		
		//tempsCST=INT
		public Assignment getTempsCSTAssignment_7() { return cTempsCSTAssignment_7; }
		
		//INT
		public RuleCall getTempsCSTINTTerminalRuleCall_7_0() { return cTempsCSTINTTerminalRuleCall_7_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }
	}
	public class DepXYZ_IMPLElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sar.drone.Drn.DepXYZ_IMPL");
		private final RuleCall cFlipParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//DepXYZ_IMPL:
		//	Flip;
		@Override public ParserRule getRule() { return rule; }
		
		//Flip
		public RuleCall getFlipParserRuleCall() { return cFlipParserRuleCall; }
	}
	public class FlipElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sar.drone.Drn.Flip");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameFlipKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Flip:
		//	name="flip" '(' ')';
		@Override public ParserRule getRule() { return rule; }
		
		//name="flip" '(' ')'
		public Group getGroup() { return cGroup; }
		
		//name="flip"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//"flip"
		public Keyword getNameFlipKeyword_0_0() { return cNameFlipKeyword_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class RotateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sar.drone.Drn.Rotate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameRotateKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cAngleKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cAngleCSTAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAngleCSTEIntParserRuleCall_4_0 = (RuleCall)cAngleCSTAssignment_4.eContents().get(0);
		private final Keyword cTempsKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cEqualsSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cTempsCSTAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cTempsCSTINTTerminalRuleCall_7_0 = (RuleCall)cTempsCSTAssignment_7.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Rotate:
		//	name="rotate" '(' 'angle' '=' angleCST=EInt 'temps' '=' tempsCST=INT ')';
		@Override public ParserRule getRule() { return rule; }
		
		//name="rotate" '(' 'angle' '=' angleCST=EInt 'temps' '=' tempsCST=INT ')'
		public Group getGroup() { return cGroup; }
		
		//name="rotate"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//"rotate"
		public Keyword getNameRotateKeyword_0_0() { return cNameRotateKeyword_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//'angle'
		public Keyword getAngleKeyword_2() { return cAngleKeyword_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//angleCST=EInt
		public Assignment getAngleCSTAssignment_4() { return cAngleCSTAssignment_4; }
		
		//EInt
		public RuleCall getAngleCSTEIntParserRuleCall_4_0() { return cAngleCSTEIntParserRuleCall_4_0; }
		
		//'temps'
		public Keyword getTempsKeyword_5() { return cTempsKeyword_5; }
		
		//'='
		public Keyword getEqualsSignKeyword_6() { return cEqualsSignKeyword_6; }
		
		//tempsCST=INT
		public Assignment getTempsCSTAssignment_7() { return cTempsCSTAssignment_7; }
		
		//INT
		public RuleCall getTempsCSTINTTerminalRuleCall_7_0() { return cTempsCSTINTTerminalRuleCall_7_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }
	}
	public class WaitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sar.drone.Drn.Wait");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameWaitKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cTempsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTempsCSTAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTempsCSTINTTerminalRuleCall_4_0 = (RuleCall)cTempsCSTAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Wait:
		//	name="wait" '(' 'temps' '=' tempsCST=INT ')';
		@Override public ParserRule getRule() { return rule; }
		
		//name="wait" '(' 'temps' '=' tempsCST=INT ')'
		public Group getGroup() { return cGroup; }
		
		//name="wait"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//"wait"
		public Keyword getNameWaitKeyword_0_0() { return cNameWaitKeyword_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//'temps'
		public Keyword getTempsKeyword_2() { return cTempsKeyword_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//tempsCST=INT
		public Assignment getTempsCSTAssignment_4() { return cTempsCSTAssignment_4; }
		
		//INT
		public RuleCall getTempsCSTINTTerminalRuleCall_4_0() { return cTempsCSTINTTerminalRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class TakeOffElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sar.drone.Drn.TakeOff");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameTakeoffKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//TakeOff:
		//	name="takeoff" '(' ')';
		@Override public ParserRule getRule() { return rule; }
		
		//name="takeoff" '(' ')'
		public Group getGroup() { return cGroup; }
		
		//name="takeoff"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//"takeoff"
		public Keyword getNameTakeoffKeyword_0_0() { return cNameTakeoffKeyword_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class LandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sar.drone.Drn.Land");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameLandKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Land:
		//	name="land" '(' ')';
		@Override public ParserRule getRule() { return rule; }
		
		//name="land" '(' ')'
		public Group getGroup() { return cGroup; }
		
		//name="land"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//"land"
		public Keyword getNameLandKeyword_0_0() { return cNameLandKeyword_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class DeviceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sar.drone.Drn.Device");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDEVICEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDeclarationsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDeclarationsDeclarationParserRuleCall_3_0 = (RuleCall)cDeclarationsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cSemicolonKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cDeclarationsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cDeclarationsDeclarationParserRuleCall_4_1_0 = (RuleCall)cDeclarationsAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		/// ******************* Option ********************* / Device:
		//	'DEVICE' name=ID
		//	'{'
		//	declarations+=Declaration (';' declarations+=Declaration)*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'DEVICE' name=ID '{' declarations+=Declaration (';' declarations+=Declaration)* '}'
		public Group getGroup() { return cGroup; }
		
		//'DEVICE'
		public Keyword getDEVICEKeyword_0() { return cDEVICEKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//declarations+=Declaration
		public Assignment getDeclarationsAssignment_3() { return cDeclarationsAssignment_3; }
		
		//Declaration
		public RuleCall getDeclarationsDeclarationParserRuleCall_3_0() { return cDeclarationsDeclarationParserRuleCall_3_0; }
		
		//(';' declarations+=Declaration)*
		public Group getGroup_4() { return cGroup_4; }
		
		//';'
		public Keyword getSemicolonKeyword_4_0() { return cSemicolonKeyword_4_0; }
		
		//declarations+=Declaration
		public Assignment getDeclarationsAssignment_4_1() { return cDeclarationsAssignment_4_1; }
		
		//Declaration
		public RuleCall getDeclarationsDeclarationParserRuleCall_4_1_0() { return cDeclarationsDeclarationParserRuleCall_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class DeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sar.drone.Drn.Declaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final CrossReference cTypeTypeGenericCrossReference_1_0_0 = (CrossReference)cTypeAssignment_1_0.eContents().get(0);
		private final RuleCall cTypeTypeGenericIDTerminalRuleCall_1_0_0_1 = (RuleCall)cTypeTypeGenericCrossReference_1_0_0.eContents().get(1);
		private final Assignment cTypePrimitifAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cTypePrimitifTypePrimitifEnumRuleCall_1_1_0 = (RuleCall)cTypePrimitifAssignment_1_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//Declaration:
		//	'type' (type=[TypeGeneric] | typePrimitif=TypePrimitif) name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'type' (type=[TypeGeneric] | typePrimitif=TypePrimitif) name=ID
		public Group getGroup() { return cGroup; }
		
		//'type'
		public Keyword getTypeKeyword_0() { return cTypeKeyword_0; }
		
		//(type=[TypeGeneric] | typePrimitif=TypePrimitif)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//type=[TypeGeneric]
		public Assignment getTypeAssignment_1_0() { return cTypeAssignment_1_0; }
		
		//[TypeGeneric]
		public CrossReference getTypeTypeGenericCrossReference_1_0_0() { return cTypeTypeGenericCrossReference_1_0_0; }
		
		//ID
		public RuleCall getTypeTypeGenericIDTerminalRuleCall_1_0_0_1() { return cTypeTypeGenericIDTerminalRuleCall_1_0_0_1; }
		
		//typePrimitif=TypePrimitif
		public Assignment getTypePrimitifAssignment_1_1() { return cTypePrimitifAssignment_1_1; }
		
		//TypePrimitif
		public RuleCall getTypePrimitifTypePrimitifEnumRuleCall_1_1_0() { return cTypePrimitifTypePrimitifEnumRuleCall_1_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}
	public class DefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sar.drone.Drn.Definition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cLeftDeclarationCrossReference_0_0 = (CrossReference)cLeftAssignment_0.eContents().get(0);
		private final RuleCall cLeftDeclarationIDTerminalRuleCall_0_0_1 = (RuleCall)cLeftDeclarationCrossReference_0_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cRightAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final CrossReference cRightElementCrossReference_2_0_0 = (CrossReference)cRightAssignment_2_0.eContents().get(0);
		private final RuleCall cRightElementIDTerminalRuleCall_2_0_0_1 = (RuleCall)cRightElementCrossReference_2_0_0.eContents().get(1);
		private final Assignment cRealAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cRealERealParserRuleCall_2_1_0 = (RuleCall)cRealAssignment_2_1.eContents().get(0);
		private final Assignment cIntAssignment_2_2 = (Assignment)cAlternatives_2.eContents().get(2);
		private final RuleCall cIntEIntParserRuleCall_2_2_0 = (RuleCall)cIntAssignment_2_2.eContents().get(0);
		private final Assignment cBoolAssignment_2_3 = (Assignment)cAlternatives_2.eContents().get(3);
		private final RuleCall cBoolEBoolEnumRuleCall_2_3_0 = (RuleCall)cBoolAssignment_2_3.eContents().get(0);
		private final Assignment cTextAssignment_2_4 = (Assignment)cAlternatives_2.eContents().get(4);
		private final RuleCall cTextSTRINGTerminalRuleCall_2_4_0 = (RuleCall)cTextAssignment_2_4.eContents().get(0);
		
		//Definition:
		//	left=[Declaration] '=' (right=[Element] | real=EReal | int=EInt | bool=EBool | text=STRING);
		@Override public ParserRule getRule() { return rule; }
		
		//left=[Declaration] '=' (right=[Element] | real=EReal | int=EInt | bool=EBool | text=STRING)
		public Group getGroup() { return cGroup; }
		
		//left=[Declaration]
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }
		
		//[Declaration]
		public CrossReference getLeftDeclarationCrossReference_0_0() { return cLeftDeclarationCrossReference_0_0; }
		
		//ID
		public RuleCall getLeftDeclarationIDTerminalRuleCall_0_0_1() { return cLeftDeclarationIDTerminalRuleCall_0_0_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//(right=[Element] | real=EReal | int=EInt | bool=EBool | text=STRING)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//right=[Element]
		public Assignment getRightAssignment_2_0() { return cRightAssignment_2_0; }
		
		//[Element]
		public CrossReference getRightElementCrossReference_2_0_0() { return cRightElementCrossReference_2_0_0; }
		
		//ID
		public RuleCall getRightElementIDTerminalRuleCall_2_0_0_1() { return cRightElementIDTerminalRuleCall_2_0_0_1; }
		
		//real=EReal
		public Assignment getRealAssignment_2_1() { return cRealAssignment_2_1; }
		
		//EReal
		public RuleCall getRealERealParserRuleCall_2_1_0() { return cRealERealParserRuleCall_2_1_0; }
		
		//int=EInt
		public Assignment getIntAssignment_2_2() { return cIntAssignment_2_2; }
		
		//EInt
		public RuleCall getIntEIntParserRuleCall_2_2_0() { return cIntEIntParserRuleCall_2_2_0; }
		
		//bool=EBool
		public Assignment getBoolAssignment_2_3() { return cBoolAssignment_2_3; }
		
		//EBool
		public RuleCall getBoolEBoolEnumRuleCall_2_3_0() { return cBoolEBoolEnumRuleCall_2_3_0; }
		
		//text=STRING
		public Assignment getTextAssignment_2_4() { return cTextAssignment_2_4; }
		
		//STRING
		public RuleCall getTextSTRINGTerminalRuleCall_2_4_0() { return cTextSTRINGTerminalRuleCall_2_4_0; }
	}
	public class WithElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sar.drone.Drn.With");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameWithKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Assignment cOptionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOptionRefDeviceParserRuleCall_1_0 = (RuleCall)cOptionAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cOptionAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cOptionRefDeviceParserRuleCall_2_1_0 = (RuleCall)cOptionAssignment_2_1.eContents().get(0);
		
		//With:
		//	name='with' option+=RefDevice ("," option+=RefDevice)*;
		@Override public ParserRule getRule() { return rule; }
		
		//name='with' option+=RefDevice ("," option+=RefDevice)*
		public Group getGroup() { return cGroup; }
		
		//name='with'
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//'with'
		public Keyword getNameWithKeyword_0_0() { return cNameWithKeyword_0_0; }
		
		//option+=RefDevice
		public Assignment getOptionAssignment_1() { return cOptionAssignment_1; }
		
		//RefDevice
		public RuleCall getOptionRefDeviceParserRuleCall_1_0() { return cOptionRefDeviceParserRuleCall_1_0; }
		
		//("," option+=RefDevice)*
		public Group getGroup_2() { return cGroup_2; }
		
		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//option+=RefDevice
		public Assignment getOptionAssignment_2_1() { return cOptionAssignment_2_1; }
		
		//RefDevice
		public RuleCall getOptionRefDeviceParserRuleCall_2_1_0() { return cOptionRefDeviceParserRuleCall_2_1_0; }
	}
	public class RefDeviceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sar.drone.Drn.RefDevice");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDevAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cDevDeviceCrossReference_0_0 = (CrossReference)cDevAssignment_0.eContents().get(0);
		private final RuleCall cDevDeviceIDTerminalRuleCall_0_0_1 = (RuleCall)cDevDeviceCrossReference_0_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cModeKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cModeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cModeModeEnumRuleCall_3_0 = (RuleCall)cModeAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cDefinitionsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cDefinitionsDefinitionParserRuleCall_4_1_0 = (RuleCall)cDefinitionsAssignment_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//RefDevice:
		//	dev=[Device]
		//	'('
		//	'mode' mode=Mode (',' definitions+=Definition)*
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//dev=[Device] '(' 'mode' mode=Mode (',' definitions+=Definition)* ')'
		public Group getGroup() { return cGroup; }
		
		//dev=[Device]
		public Assignment getDevAssignment_0() { return cDevAssignment_0; }
		
		//[Device]
		public CrossReference getDevDeviceCrossReference_0_0() { return cDevDeviceCrossReference_0_0; }
		
		//ID
		public RuleCall getDevDeviceIDTerminalRuleCall_0_0_1() { return cDevDeviceIDTerminalRuleCall_0_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//'mode'
		public Keyword getModeKeyword_2() { return cModeKeyword_2; }
		
		//mode=Mode
		public Assignment getModeAssignment_3() { return cModeAssignment_3; }
		
		//Mode
		public RuleCall getModeModeEnumRuleCall_3_0() { return cModeModeEnumRuleCall_3_0; }
		
		//(',' definitions+=Definition)*
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//definitions+=Definition
		public Assignment getDefinitionsAssignment_4_1() { return cDefinitionsAssignment_4_1; }
		
		//Definition
		public RuleCall getDefinitionsDefinitionParserRuleCall_4_1_0() { return cDefinitionsDefinitionParserRuleCall_4_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class TypeGenericElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sar.drone.Drn.TypeGeneric");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cElementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cElementsElementParserRuleCall_3_0 = (RuleCall)cElementsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cSemicolonKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cElementsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cElementsElementParserRuleCall_4_1_0 = (RuleCall)cElementsAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		/// ******************* Type ********************* / TypeGeneric:
		//	'Type' name=ID
		//	'{'
		//	elements+=Element (';' elements+=Element)*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Type' name=ID '{' elements+=Element (';' elements+=Element)* '}'
		public Group getGroup() { return cGroup; }
		
		//'Type'
		public Keyword getTypeKeyword_0() { return cTypeKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//elements+=Element
		public Assignment getElementsAssignment_3() { return cElementsAssignment_3; }
		
		//Element
		public RuleCall getElementsElementParserRuleCall_3_0() { return cElementsElementParserRuleCall_3_0; }
		
		//(';' elements+=Element)*
		public Group getGroup_4() { return cGroup_4; }
		
		//';'
		public Keyword getSemicolonKeyword_4_0() { return cSemicolonKeyword_4_0; }
		
		//elements+=Element
		public Assignment getElementsAssignment_4_1() { return cElementsAssignment_4_1; }
		
		//Element
		public RuleCall getElementsElementParserRuleCall_4_1_0() { return cElementsElementParserRuleCall_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class ElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sar.drone.Drn.Element");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cElementKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Element:
		//	'element' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'element' name=ID
		public Group getGroup() { return cGroup; }
		
		//'element'
		public Keyword getElementKeyword_0() { return cElementKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sar.drone.Drn.EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt:
		//	'-'? INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	public class ERealElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sar.drone.Drn.EReal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//EReal:
		//	'-'? INT '.' INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT '.' INT
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
		
		//'.'
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_3() { return cINTTerminalRuleCall_3; }
	}
	
	public class TypePrimitifElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "sar.drone.Drn.TypePrimitif");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cBoolTypeEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cBoolTypeBOOLEANKeyword_0_0 = (Keyword)cBoolTypeEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cRealTypeEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cRealTypeREALKeyword_1_0 = (Keyword)cRealTypeEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cIntTypeEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cIntTypeNUMBERKeyword_2_0 = (Keyword)cIntTypeEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cStringTypeEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cStringTypeTEXTKeyword_3_0 = (Keyword)cStringTypeEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum TypePrimitif:
		//	boolType='BOOLEAN'
		//	| realType='REAL'
		//	| intType='NUMBER'
		//	| stringType='TEXT';
		public EnumRule getRule() { return rule; }
		
		//boolType='BOOLEAN' | realType='REAL' | intType='NUMBER' | stringType='TEXT'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//boolType='BOOLEAN'
		public EnumLiteralDeclaration getBoolTypeEnumLiteralDeclaration_0() { return cBoolTypeEnumLiteralDeclaration_0; }
		
		//'BOOLEAN'
		public Keyword getBoolTypeBOOLEANKeyword_0_0() { return cBoolTypeBOOLEANKeyword_0_0; }
		
		//realType='REAL'
		public EnumLiteralDeclaration getRealTypeEnumLiteralDeclaration_1() { return cRealTypeEnumLiteralDeclaration_1; }
		
		//'REAL'
		public Keyword getRealTypeREALKeyword_1_0() { return cRealTypeREALKeyword_1_0; }
		
		//intType='NUMBER'
		public EnumLiteralDeclaration getIntTypeEnumLiteralDeclaration_2() { return cIntTypeEnumLiteralDeclaration_2; }
		
		//'NUMBER'
		public Keyword getIntTypeNUMBERKeyword_2_0() { return cIntTypeNUMBERKeyword_2_0; }
		
		//stringType='TEXT'
		public EnumLiteralDeclaration getStringTypeEnumLiteralDeclaration_3() { return cStringTypeEnumLiteralDeclaration_3; }
		
		//'TEXT'
		public Keyword getStringTypeTEXTKeyword_3_0() { return cStringTypeTEXTKeyword_3_0; }
	}
	public class ModeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "sar.drone.Drn.Mode");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cOFFEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cOFFOFFKeyword_0_0 = (Keyword)cOFFEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cONEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cONONKeyword_1_0 = (Keyword)cONEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum Mode: // Mode:
		//	OFF | ON;
		public EnumRule getRule() { return rule; }
		
		//// Mode:
		//OFF | ON
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//// Mode:
		//OFF
		public EnumLiteralDeclaration getOFFEnumLiteralDeclaration_0() { return cOFFEnumLiteralDeclaration_0; }
		
		//'OFF'
		public Keyword getOFFOFFKeyword_0_0() { return cOFFOFFKeyword_0_0; }
		
		//ON
		public EnumLiteralDeclaration getONEnumLiteralDeclaration_1() { return cONEnumLiteralDeclaration_1; }
		
		//'ON'
		public Keyword getONONKeyword_1_0() { return cONONKeyword_1_0; }
	}
	public class EBoolElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "sar.drone.Drn.EBool");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cTRUEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cTRUETRUEKeyword_0_0 = (Keyword)cTRUEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cFALSEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cFALSEFALSEKeyword_1_0 = (Keyword)cFALSEEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum EBool:
		//	TRUE | FALSE;
		public EnumRule getRule() { return rule; }
		
		//TRUE | FALSE
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TRUE
		public EnumLiteralDeclaration getTRUEEnumLiteralDeclaration_0() { return cTRUEEnumLiteralDeclaration_0; }
		
		//'TRUE'
		public Keyword getTRUETRUEKeyword_0_0() { return cTRUETRUEKeyword_0_0; }
		
		//FALSE
		public EnumLiteralDeclaration getFALSEEnumLiteralDeclaration_1() { return cFALSEEnumLiteralDeclaration_1; }
		
		//'FALSE'
		public Keyword getFALSEFALSEKeyword_1_0() { return cFALSEFALSEKeyword_1_0; }
	}
	public class DirectionTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "sar.drone.Drn.DirectionType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cFRONTEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cFRONTFRONTKeyword_0_0 = (Keyword)cFRONTEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cBEHINDEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cBEHINDBEHINDKeyword_1_0 = (Keyword)cBEHINDEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cLEFTEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cLEFTLEFTKeyword_2_0 = (Keyword)cLEFTEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cRIGHTEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cRIGHTRIGHTKeyword_3_0 = (Keyword)cRIGHTEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum DirectionType:
		//	FRONT | BEHIND | LEFT | RIGHT;
		public EnumRule getRule() { return rule; }
		
		//FRONT | BEHIND | LEFT | RIGHT
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FRONT
		public EnumLiteralDeclaration getFRONTEnumLiteralDeclaration_0() { return cFRONTEnumLiteralDeclaration_0; }
		
		//'FRONT'
		public Keyword getFRONTFRONTKeyword_0_0() { return cFRONTFRONTKeyword_0_0; }
		
		//BEHIND
		public EnumLiteralDeclaration getBEHINDEnumLiteralDeclaration_1() { return cBEHINDEnumLiteralDeclaration_1; }
		
		//'BEHIND'
		public Keyword getBEHINDBEHINDKeyword_1_0() { return cBEHINDBEHINDKeyword_1_0; }
		
		//LEFT
		public EnumLiteralDeclaration getLEFTEnumLiteralDeclaration_2() { return cLEFTEnumLiteralDeclaration_2; }
		
		//'LEFT'
		public Keyword getLEFTLEFTKeyword_2_0() { return cLEFTLEFTKeyword_2_0; }
		
		//RIGHT
		public EnumLiteralDeclaration getRIGHTEnumLiteralDeclaration_3() { return cRIGHTEnumLiteralDeclaration_3; }
		
		//'RIGHT'
		public Keyword getRIGHTRIGHTKeyword_3_0() { return cRIGHTRIGHTKeyword_3_0; }
	}
	
	private final RootElements pRoot;
	private final ModelElements pModel;
	private final LibraryElements pLibrary;
	private final ContextElements pContext;
	private final LimitElements pLimit;
	private final SurfaceElements pSurface;
	private final InitialPositionElements pInitialPosition;
	private final InitialDirectionElements pInitialDirection;
	private final InitialPositionXElements pInitialPositionX;
	private final InitialPositionYElements pInitialPositionY;
	private final MaxLengthElements pMaxLength;
	private final MaxWidthElements pMaxWidth;
	private final MaxSpeedElements pMaxSpeed;
	private final MaxHeightElements pMaxHeight;
	private final AssignementElements pAssignement;
	private final ExpressionElements pExpression;
	private final MovementElements pMovement;
	private final RefPartElements pRefPart;
	private final RefPartLibElements pRefPartLib;
	private final AndElements pAnd;
	private final DepY_ImplElements pDepY_Impl;
	private final FORWARDElements pFORWARD;
	private final BACKWARDElements pBACKWARD;
	private final DepX_ImplElements pDepX_Impl;
	private final LEFTElements pLEFT;
	private final RIGHTElements pRIGHT;
	private final DepZ_ImplElements pDepZ_Impl;
	private final UPElements pUP;
	private final DOWNElements pDOWN;
	private final DepXY_IMPLElements pDepXY_IMPL;
	private final CERCLEXYElements pCERCLEXY;
	private final CARREXYElements pCARREXY;
	private final DepYZ_IMPLElements pDepYZ_IMPL;
	private final CERCLEYZElements pCERCLEYZ;
	private final CARREYZElements pCARREYZ;
	private final DepXZ_IMPLElements pDepXZ_IMPL;
	private final CERCLEXZElements pCERCLEXZ;
	private final CARREXZElements pCARREXZ;
	private final DepXYZ_IMPLElements pDepXYZ_IMPL;
	private final FlipElements pFlip;
	private final RotateElements pRotate;
	private final WaitElements pWait;
	private final TakeOffElements pTakeOff;
	private final LandElements pLand;
	private final DeviceElements pDevice;
	private final DeclarationElements pDeclaration;
	private final DefinitionElements pDefinition;
	private final WithElements pWith;
	private final RefDeviceElements pRefDevice;
	private final TypeGenericElements pTypeGeneric;
	private final ElementElements pElement;
	private final TypePrimitifElements eTypePrimitif;
	private final EIntElements pEInt;
	private final ERealElements pEReal;
	private final ModeElements eMode;
	private final EBoolElements eEBool;
	private final DirectionTypeElements eDirectionType;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public DrnGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pRoot = new RootElements();
		this.pModel = new ModelElements();
		this.pLibrary = new LibraryElements();
		this.pContext = new ContextElements();
		this.pLimit = new LimitElements();
		this.pSurface = new SurfaceElements();
		this.pInitialPosition = new InitialPositionElements();
		this.pInitialDirection = new InitialDirectionElements();
		this.pInitialPositionX = new InitialPositionXElements();
		this.pInitialPositionY = new InitialPositionYElements();
		this.pMaxLength = new MaxLengthElements();
		this.pMaxWidth = new MaxWidthElements();
		this.pMaxSpeed = new MaxSpeedElements();
		this.pMaxHeight = new MaxHeightElements();
		this.pAssignement = new AssignementElements();
		this.pExpression = new ExpressionElements();
		this.pMovement = new MovementElements();
		this.pRefPart = new RefPartElements();
		this.pRefPartLib = new RefPartLibElements();
		this.pAnd = new AndElements();
		this.pDepY_Impl = new DepY_ImplElements();
		this.pFORWARD = new FORWARDElements();
		this.pBACKWARD = new BACKWARDElements();
		this.pDepX_Impl = new DepX_ImplElements();
		this.pLEFT = new LEFTElements();
		this.pRIGHT = new RIGHTElements();
		this.pDepZ_Impl = new DepZ_ImplElements();
		this.pUP = new UPElements();
		this.pDOWN = new DOWNElements();
		this.pDepXY_IMPL = new DepXY_IMPLElements();
		this.pCERCLEXY = new CERCLEXYElements();
		this.pCARREXY = new CARREXYElements();
		this.pDepYZ_IMPL = new DepYZ_IMPLElements();
		this.pCERCLEYZ = new CERCLEYZElements();
		this.pCARREYZ = new CARREYZElements();
		this.pDepXZ_IMPL = new DepXZ_IMPLElements();
		this.pCERCLEXZ = new CERCLEXZElements();
		this.pCARREXZ = new CARREXZElements();
		this.pDepXYZ_IMPL = new DepXYZ_IMPLElements();
		this.pFlip = new FlipElements();
		this.pRotate = new RotateElements();
		this.pWait = new WaitElements();
		this.pTakeOff = new TakeOffElements();
		this.pLand = new LandElements();
		this.pDevice = new DeviceElements();
		this.pDeclaration = new DeclarationElements();
		this.pDefinition = new DefinitionElements();
		this.pWith = new WithElements();
		this.pRefDevice = new RefDeviceElements();
		this.pTypeGeneric = new TypeGenericElements();
		this.pElement = new ElementElements();
		this.eTypePrimitif = new TypePrimitifElements();
		this.pEInt = new EIntElements();
		this.pEReal = new ERealElements();
		this.eMode = new ModeElements();
		this.eEBool = new EBoolElements();
		this.eDirectionType = new DirectionTypeElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("sar.drone.Drn".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Root:
	//	Library | Model;
	public RootElements getRootAccess() {
		return pRoot;
	}
	
	public ParserRule getRootRule() {
		return getRootAccess().getRule();
	}
	
	//Model:
	//	'CHOREOGRAPHY'
	//	'{' ('import' libraries+=[Library] ';')*
	//	context=Context?
	//	assignement+=Assignement
	//	assignement+=Assignement*
	//	'start' '=' main=RefPart ';'
	//	'}';
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Library:
	//	'LIBRARY' name=ID
	//	'{'
	//	types+=TypeGeneric*
	//	devices+=Device*
	//	assignement+=Assignement*
	//	'}';
	public LibraryElements getLibraryAccess() {
		return pLibrary;
	}
	
	public ParserRule getLibraryRule() {
		return getLibraryAccess().getRule();
	}
	
	/// ******************* Contexte ********************* / Context:
	//	name='CONTEXT'
	//	'{'
	//	limit+=Limit ";" (limit+=Limit ";")*
	//	'}';
	public ContextElements getContextAccess() {
		return pContext;
	}
	
	public ParserRule getContextRule() {
		return getContextAccess().getRule();
	}
	
	//Limit:
	//	MaxSpeed | Surface | InitialPosition;
	public LimitElements getLimitAccess() {
		return pLimit;
	}
	
	public ParserRule getLimitRule() {
		return getLimitAccess().getRule();
	}
	
	//Surface:
	//	MaxHeight | MaxLength | MaxWidth;
	public SurfaceElements getSurfaceAccess() {
		return pSurface;
	}
	
	public ParserRule getSurfaceRule() {
		return getSurfaceAccess().getRule();
	}
	
	//InitialPosition:
	//	InitialPositionX | InitialPositionY | InitialDirection;
	public InitialPositionElements getInitialPositionAccess() {
		return pInitialPosition;
	}
	
	public ParserRule getInitialPositionRule() {
		return getInitialPositionAccess().getRule();
	}
	
	//InitialDirection:
	//	name="initialDirection"
	//	'=' value=DirectionType;
	public InitialDirectionElements getInitialDirectionAccess() {
		return pInitialDirection;
	}
	
	public ParserRule getInitialDirectionRule() {
		return getInitialDirectionAccess().getRule();
	}
	
	//InitialPositionX:
	//	name="positionX"
	//	'=' value=INT;
	public InitialPositionXElements getInitialPositionXAccess() {
		return pInitialPositionX;
	}
	
	public ParserRule getInitialPositionXRule() {
		return getInitialPositionXAccess().getRule();
	}
	
	//InitialPositionY:
	//	name="positionY"
	//	'=' value=INT;
	public InitialPositionYElements getInitialPositionYAccess() {
		return pInitialPositionY;
	}
	
	public ParserRule getInitialPositionYRule() {
		return getInitialPositionYAccess().getRule();
	}
	
	//MaxLength:
	//	name="maxLength"
	//	'=' value=INT;
	public MaxLengthElements getMaxLengthAccess() {
		return pMaxLength;
	}
	
	public ParserRule getMaxLengthRule() {
		return getMaxLengthAccess().getRule();
	}
	
	//MaxWidth:
	//	name="maxWidth"
	//	'=' value=INT;
	public MaxWidthElements getMaxWidthAccess() {
		return pMaxWidth;
	}
	
	public ParserRule getMaxWidthRule() {
		return getMaxWidthAccess().getRule();
	}
	
	//MaxSpeed:
	//	name="maxSpeed"
	//	'=' value=INT;
	public MaxSpeedElements getMaxSpeedAccess() {
		return pMaxSpeed;
	}
	
	public ParserRule getMaxSpeedRule() {
		return getMaxSpeedAccess().getRule();
	}
	
	//MaxHeight:
	//	name="maxHeight"
	//	'=' value=INT;
	public MaxHeightElements getMaxHeightAccess() {
		return pMaxHeight;
	}
	
	public ParserRule getMaxHeightRule() {
		return getMaxHeightAccess().getRule();
	}
	
	/// ******************* Alias ********************* / Assignement:
	//	name=ID '{'
	//	operandes+=Expression ';' (operandes+=Expression ';')*
	//	'}';
	public AssignementElements getAssignementAccess() {
		return pAssignement;
	}
	
	public ParserRule getAssignementRule() {
		return getAssignementAccess().getRule();
	}
	
	/// ******************* Expression ********************* / Expression:
	//	move=Movement ('X' repeatCST=INT)? ^with+=With?
	//	| '(' move=Movement ('then' then+=Expression) ('then' then+=Expression)* ')' ('X' repeatCST=INT)? ^with+=With?;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//Movement:
	//	And | RefPart | RefPartLib | DepX_Impl | DepY_Impl | DepZ_Impl | DepXY_IMPL | DepXZ_IMPL | DepYZ_IMPL | DepXYZ_IMPL |
	//	TakeOff | Wait | Rotate | Land;
	public MovementElements getMovementAccess() {
		return pMovement;
	}
	
	public ParserRule getMovementRule() {
		return getMovementAccess().getRule();
	}
	
	//RefPart:
	//	variable_partie=[Assignement];
	public RefPartElements getRefPartAccess() {
		return pRefPart;
	}
	
	public ParserRule getRefPartRule() {
		return getRefPartAccess().getRule();
	}
	
	//RefPartLib:
	//	libs=[Library] '.' assignements=[Assignement];
	public RefPartLibElements getRefPartLibAccess() {
		return pRefPartLib;
	}
	
	public ParserRule getRefPartLibRule() {
		return getRefPartLibAccess().getRule();
	}
	
	//And:
	//	{And} name='merge' '(' (rotate+=Rotate | depx+=DepX_Impl | depy+=DepY_Impl | depz+=DepZ_Impl | depxz+=DepXZ_IMPL |
	//	depxy+=DepXY_IMPL | depyz+=DepYZ_IMPL) ',' (rotate+=Rotate | depx+=DepX_Impl | depy+=DepY_Impl | depz+=DepZ_Impl |
	//	depxz+=DepXZ_IMPL | depxy+=DepXY_IMPL | depyz+=DepYZ_IMPL) (',' (rotate+=Rotate | depx+=DepX_Impl | depy+=DepY_Impl |
	//	depz+=DepZ_Impl | depxz+=DepXZ_IMPL | depxy+=DepXY_IMPL | depyz+=DepYZ_IMPL))*
	//	')';
	public AndElements getAndAccess() {
		return pAnd;
	}
	
	public ParserRule getAndRule() {
		return getAndAccess().getRule();
	}
	
	/// ******************* Action ********************* / DepY_Impl:
	//	FORWARD | BACKWARD;
	public DepY_ImplElements getDepY_ImplAccess() {
		return pDepY_Impl;
	}
	
	public ParserRule getDepY_ImplRule() {
		return getDepY_ImplAccess().getRule();
	}
	
	//FORWARD:
	//	name="forward" '('
	//	'distance' '=' distanceCST=INT
	//	'temps' '=' tempsCST=INT
	//	')';
	public FORWARDElements getFORWARDAccess() {
		return pFORWARD;
	}
	
	public ParserRule getFORWARDRule() {
		return getFORWARDAccess().getRule();
	}
	
	//BACKWARD:
	//	name="backward" '('
	//	'distance' '=' distanceCST=INT
	//	'temps' '=' tempsCST=INT
	//	')';
	public BACKWARDElements getBACKWARDAccess() {
		return pBACKWARD;
	}
	
	public ParserRule getBACKWARDRule() {
		return getBACKWARDAccess().getRule();
	}
	
	//DepX_Impl:
	//	LEFT | RIGHT;
	public DepX_ImplElements getDepX_ImplAccess() {
		return pDepX_Impl;
	}
	
	public ParserRule getDepX_ImplRule() {
		return getDepX_ImplAccess().getRule();
	}
	
	//LEFT:
	//	name="left" '('
	//	'distance' '=' distanceCST=INT
	//	'temps' '=' tempsCST=INT
	//	')';
	public LEFTElements getLEFTAccess() {
		return pLEFT;
	}
	
	public ParserRule getLEFTRule() {
		return getLEFTAccess().getRule();
	}
	
	//RIGHT:
	//	name="right" '('
	//	'distance' '=' distanceCST=INT
	//	'temps' '=' tempsCST=INT
	//	')';
	public RIGHTElements getRIGHTAccess() {
		return pRIGHT;
	}
	
	public ParserRule getRIGHTRule() {
		return getRIGHTAccess().getRule();
	}
	
	//DepZ_Impl:
	//	UP | DOWN;
	public DepZ_ImplElements getDepZ_ImplAccess() {
		return pDepZ_Impl;
	}
	
	public ParserRule getDepZ_ImplRule() {
		return getDepZ_ImplAccess().getRule();
	}
	
	//UP:
	//	name="up" '('
	//	'distance' '=' distanceCST=INT
	//	'temps' '=' tempsCST=INT
	//	')';
	public UPElements getUPAccess() {
		return pUP;
	}
	
	public ParserRule getUPRule() {
		return getUPAccess().getRule();
	}
	
	//DOWN:
	//	name="down" '('
	//	'distance' '=' distanceCST=INT
	//	'temps' '=' tempsCST=INT
	//	')';
	public DOWNElements getDOWNAccess() {
		return pDOWN;
	}
	
	public ParserRule getDOWNRule() {
		return getDOWNAccess().getRule();
	}
	
	//DepXY_IMPL:
	//	CERCLEXY | CARREXY;
	public DepXY_IMPLElements getDepXY_IMPLAccess() {
		return pDepXY_IMPL;
	}
	
	public ParserRule getDepXY_IMPLRule() {
		return getDepXY_IMPLAccess().getRule();
	}
	
	//CERCLEXY:
	//	name="cercleXY" '('
	//	'rayon' '=' rayonCST=INT
	//	'temps' '=' tempsCST=INT
	//	')';
	public CERCLEXYElements getCERCLEXYAccess() {
		return pCERCLEXY;
	}
	
	public ParserRule getCERCLEXYRule() {
		return getCERCLEXYAccess().getRule();
	}
	
	//CARREXY:
	//	name="carreXY" '('
	//	'cote' '=' coteCST=INT
	//	'temps' '=' tempsCST=INT
	//	')';
	public CARREXYElements getCARREXYAccess() {
		return pCARREXY;
	}
	
	public ParserRule getCARREXYRule() {
		return getCARREXYAccess().getRule();
	}
	
	//DepYZ_IMPL:
	//	CERCLEYZ | CARREYZ;
	public DepYZ_IMPLElements getDepYZ_IMPLAccess() {
		return pDepYZ_IMPL;
	}
	
	public ParserRule getDepYZ_IMPLRule() {
		return getDepYZ_IMPLAccess().getRule();
	}
	
	//CERCLEYZ:
	//	name="cercleYZ" '('
	//	'rayon' '=' rayonCST=INT
	//	'temps' '=' tempsCST=INT
	//	')';
	public CERCLEYZElements getCERCLEYZAccess() {
		return pCERCLEYZ;
	}
	
	public ParserRule getCERCLEYZRule() {
		return getCERCLEYZAccess().getRule();
	}
	
	//CARREYZ:
	//	name="carreYZ" '('
	//	'cote' '=' coteCST=INT
	//	'temps' '=' tempsCST=INT
	//	')';
	public CARREYZElements getCARREYZAccess() {
		return pCARREYZ;
	}
	
	public ParserRule getCARREYZRule() {
		return getCARREYZAccess().getRule();
	}
	
	//DepXZ_IMPL:
	//	CERCLEXZ | CARREXZ;
	public DepXZ_IMPLElements getDepXZ_IMPLAccess() {
		return pDepXZ_IMPL;
	}
	
	public ParserRule getDepXZ_IMPLRule() {
		return getDepXZ_IMPLAccess().getRule();
	}
	
	//CERCLEXZ:
	//	name="cercleXZ" '('
	//	'rayon' '=' rayonCST=INT
	//	'temps' '=' tempsCST=INT
	//	')';
	public CERCLEXZElements getCERCLEXZAccess() {
		return pCERCLEXZ;
	}
	
	public ParserRule getCERCLEXZRule() {
		return getCERCLEXZAccess().getRule();
	}
	
	//CARREXZ:
	//	name="carreXZ" '('
	//	'cote' '=' coteCST=INT
	//	'temps' '=' tempsCST=INT
	//	')';
	public CARREXZElements getCARREXZAccess() {
		return pCARREXZ;
	}
	
	public ParserRule getCARREXZRule() {
		return getCARREXZAccess().getRule();
	}
	
	//DepXYZ_IMPL:
	//	Flip;
	public DepXYZ_IMPLElements getDepXYZ_IMPLAccess() {
		return pDepXYZ_IMPL;
	}
	
	public ParserRule getDepXYZ_IMPLRule() {
		return getDepXYZ_IMPLAccess().getRule();
	}
	
	//Flip:
	//	name="flip" '(' ')';
	public FlipElements getFlipAccess() {
		return pFlip;
	}
	
	public ParserRule getFlipRule() {
		return getFlipAccess().getRule();
	}
	
	//Rotate:
	//	name="rotate" '(' 'angle' '=' angleCST=EInt 'temps' '=' tempsCST=INT ')';
	public RotateElements getRotateAccess() {
		return pRotate;
	}
	
	public ParserRule getRotateRule() {
		return getRotateAccess().getRule();
	}
	
	//Wait:
	//	name="wait" '(' 'temps' '=' tempsCST=INT ')';
	public WaitElements getWaitAccess() {
		return pWait;
	}
	
	public ParserRule getWaitRule() {
		return getWaitAccess().getRule();
	}
	
	//TakeOff:
	//	name="takeoff" '(' ')';
	public TakeOffElements getTakeOffAccess() {
		return pTakeOff;
	}
	
	public ParserRule getTakeOffRule() {
		return getTakeOffAccess().getRule();
	}
	
	//Land:
	//	name="land" '(' ')';
	public LandElements getLandAccess() {
		return pLand;
	}
	
	public ParserRule getLandRule() {
		return getLandAccess().getRule();
	}
	
	/// ******************* Option ********************* / Device:
	//	'DEVICE' name=ID
	//	'{'
	//	declarations+=Declaration (';' declarations+=Declaration)*
	//	'}';
	public DeviceElements getDeviceAccess() {
		return pDevice;
	}
	
	public ParserRule getDeviceRule() {
		return getDeviceAccess().getRule();
	}
	
	//Declaration:
	//	'type' (type=[TypeGeneric] | typePrimitif=TypePrimitif) name=ID;
	public DeclarationElements getDeclarationAccess() {
		return pDeclaration;
	}
	
	public ParserRule getDeclarationRule() {
		return getDeclarationAccess().getRule();
	}
	
	//Definition:
	//	left=[Declaration] '=' (right=[Element] | real=EReal | int=EInt | bool=EBool | text=STRING);
	public DefinitionElements getDefinitionAccess() {
		return pDefinition;
	}
	
	public ParserRule getDefinitionRule() {
		return getDefinitionAccess().getRule();
	}
	
	//With:
	//	name='with' option+=RefDevice ("," option+=RefDevice)*;
	public WithElements getWithAccess() {
		return pWith;
	}
	
	public ParserRule getWithRule() {
		return getWithAccess().getRule();
	}
	
	//RefDevice:
	//	dev=[Device]
	//	'('
	//	'mode' mode=Mode (',' definitions+=Definition)*
	//	')';
	public RefDeviceElements getRefDeviceAccess() {
		return pRefDevice;
	}
	
	public ParserRule getRefDeviceRule() {
		return getRefDeviceAccess().getRule();
	}
	
	/// ******************* Type ********************* / TypeGeneric:
	//	'Type' name=ID
	//	'{'
	//	elements+=Element (';' elements+=Element)*
	//	'}';
	public TypeGenericElements getTypeGenericAccess() {
		return pTypeGeneric;
	}
	
	public ParserRule getTypeGenericRule() {
		return getTypeGenericAccess().getRule();
	}
	
	//Element:
	//	'element' name=ID;
	public ElementElements getElementAccess() {
		return pElement;
	}
	
	public ParserRule getElementRule() {
		return getElementAccess().getRule();
	}
	
	//enum TypePrimitif:
	//	boolType='BOOLEAN'
	//	| realType='REAL'
	//	| intType='NUMBER'
	//	| stringType='TEXT';
	public TypePrimitifElements getTypePrimitifAccess() {
		return eTypePrimitif;
	}
	
	public EnumRule getTypePrimitifRule() {
		return getTypePrimitifAccess().getRule();
	}
	
	//EInt:
	//	'-'? INT;
	public EIntElements getEIntAccess() {
		return pEInt;
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}
	
	//EReal:
	//	'-'? INT '.' INT;
	public ERealElements getERealAccess() {
		return pEReal;
	}
	
	public ParserRule getERealRule() {
		return getERealAccess().getRule();
	}
	
	//enum Mode: // Mode:
	//	OFF | ON;
	public ModeElements getModeAccess() {
		return eMode;
	}
	
	public EnumRule getModeRule() {
		return getModeAccess().getRule();
	}
	
	//enum EBool:
	//	TRUE | FALSE;
	public EBoolElements getEBoolAccess() {
		return eEBool;
	}
	
	public EnumRule getEBoolRule() {
		return getEBoolAccess().getRule();
	}
	
	//enum DirectionType:
	//	FRONT | BEHIND | LEFT | RIGHT;
	public DirectionTypeElements getDirectionTypeAccess() {
		return eDirectionType;
	}
	
	public EnumRule getDirectionTypeRule() {
		return getDirectionTypeAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
