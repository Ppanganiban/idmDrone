/**
 * generated by Xtext 2.10.0
 */
package sar.drone.drn.util;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

import sar.drone.drn.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see sar.drone.drn.DrnPackage
 * @generated
 */
public class DrnSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static DrnPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DrnSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = DrnPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case DrnPackage.ROOT:
      {
        Root root = (Root)theEObject;
        T result = caseRoot(root);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DrnPackage.MODEL:
      {
        Model model = (Model)theEObject;
        T result = caseModel(model);
        if (result == null) result = caseRoot(model);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DrnPackage.LIBRARY:
      {
        Library library = (Library)theEObject;
        T result = caseLibrary(library);
        if (result == null) result = caseRoot(library);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DrnPackage.CONTEXT:
      {
        Context context = (Context)theEObject;
        T result = caseContext(context);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DrnPackage.LIMIT:
      {
        Limit limit = (Limit)theEObject;
        T result = caseLimit(limit);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DrnPackage.SURFACE:
      {
        Surface surface = (Surface)theEObject;
        T result = caseSurface(surface);
        if (result == null) result = caseLimit(surface);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DrnPackage.INITIAL_POSITION:
      {
        InitialPosition initialPosition = (InitialPosition)theEObject;
        T result = caseInitialPosition(initialPosition);
        if (result == null) result = caseLimit(initialPosition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DrnPackage.INITIAL_DIRECTION:
      {
        InitialDirection initialDirection = (InitialDirection)theEObject;
        T result = caseInitialDirection(initialDirection);
        if (result == null) result = caseInitialPosition(initialDirection);
        if (result == null) result = caseLimit(initialDirection);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DrnPackage.INITIAL_POSITION_X:
      {
        InitialPositionX initialPositionX = (InitialPositionX)theEObject;
        T result = caseInitialPositionX(initialPositionX);
        if (result == null) result = caseInitialPosition(initialPositionX);
        if (result == null) result = caseLimit(initialPositionX);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DrnPackage.INITIAL_POSITION_Y:
      {
        InitialPositionY initialPositionY = (InitialPositionY)theEObject;
        T result = caseInitialPositionY(initialPositionY);
        if (result == null) result = caseInitialPosition(initialPositionY);
        if (result == null) result = caseLimit(initialPositionY);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DrnPackage.MAX_LENGTH:
      {
        MaxLength maxLength = (MaxLength)theEObject;
        T result = caseMaxLength(maxLength);
        if (result == null) result = caseSurface(maxLength);
        if (result == null) result = caseLimit(maxLength);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DrnPackage.MAX_WIDTH:
      {
        MaxWidth maxWidth = (MaxWidth)theEObject;
        T result = caseMaxWidth(maxWidth);
        if (result == null) result = caseSurface(maxWidth);
        if (result == null) result = caseLimit(maxWidth);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DrnPackage.MAX_SPEED:
      {
        MaxSpeed maxSpeed = (MaxSpeed)theEObject;
        T result = caseMaxSpeed(maxSpeed);
        if (result == null) result = caseLimit(maxSpeed);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DrnPackage.MAX_HEIGHT:
      {
        MaxHeight maxHeight = (MaxHeight)theEObject;
        T result = caseMaxHeight(maxHeight);
        if (result == null) result = caseSurface(maxHeight);
        if (result == null) result = caseLimit(maxHeight);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DrnPackage.ASSIGNEMENT:
      {
        Assignement assignement = (Assignement)theEObject;
        T result = caseAssignement(assignement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DrnPackage.EXPRESSION:
      {
        Expression expression = (Expression)theEObject;
        T result = caseExpression(expression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DrnPackage.MOVEMENT:
      {
        Movement movement = (Movement)theEObject;
        T result = caseMovement(movement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DrnPackage.REF_PART:
      {
        RefPart refPart = (RefPart)theEObject;
        T result = caseRefPart(refPart);
        if (result == null) result = caseMovement(refPart);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DrnPackage.REF_PART_LIB:
      {
        RefPartLib refPartLib = (RefPartLib)theEObject;
        T result = caseRefPartLib(refPartLib);
        if (result == null) result = caseMovement(refPartLib);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DrnPackage.AND:
      {
        And and = (And)theEObject;
        T result = caseAnd(and);
        if (result == null) result = caseMovement(and);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DrnPackage.DEP_YIMPL:
      {
        DepY_Impl depY_Impl = (DepY_Impl)theEObject;
        T result = caseDepY_Impl(depY_Impl);
        if (result == null) result = caseMovement(depY_Impl);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DrnPackage.FORWARD:
      {
        FORWARD forward = (FORWARD)theEObject;
        T result = caseFORWARD(forward);
        if (result == null) result = caseDepY_Impl(forward);
        if (result == null) result = caseMovement(forward);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DrnPackage.BACKWARD:
      {
        BACKWARD backward = (BACKWARD)theEObject;
        T result = caseBACKWARD(backward);
        if (result == null) result = caseDepY_Impl(backward);
        if (result == null) result = caseMovement(backward);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DrnPackage.DEP_XIMPL:
      {
        DepX_Impl depX_Impl = (DepX_Impl)theEObject;
        T result = caseDepX_Impl(depX_Impl);
        if (result == null) result = caseMovement(depX_Impl);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DrnPackage.LEFT:
      {
        LEFT left = (LEFT)theEObject;
        T result = caseLEFT(left);
        if (result == null) result = caseDepX_Impl(left);
        if (result == null) result = caseMovement(left);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DrnPackage.RIGHT:
      {
        RIGHT right = (RIGHT)theEObject;
        T result = caseRIGHT(right);
        if (result == null) result = caseDepX_Impl(right);
        if (result == null) result = caseMovement(right);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DrnPackage.DEP_ZIMPL:
      {
        DepZ_Impl depZ_Impl = (DepZ_Impl)theEObject;
        T result = caseDepZ_Impl(depZ_Impl);
        if (result == null) result = caseMovement(depZ_Impl);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DrnPackage.UP:
      {
        UP up = (UP)theEObject;
        T result = caseUP(up);
        if (result == null) result = caseDepZ_Impl(up);
        if (result == null) result = caseMovement(up);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DrnPackage.DOWN:
      {
        DOWN down = (DOWN)theEObject;
        T result = caseDOWN(down);
        if (result == null) result = caseDepZ_Impl(down);
        if (result == null) result = caseMovement(down);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DrnPackage.DEP_XY_IMPL:
      {
        DepXY_IMPL depXY_IMPL = (DepXY_IMPL)theEObject;
        T result = caseDepXY_IMPL(depXY_IMPL);
        if (result == null) result = caseMovement(depXY_IMPL);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DrnPackage.CERCLEXY:
      {
        CERCLEXY cerclexy = (CERCLEXY)theEObject;
        T result = caseCERCLEXY(cerclexy);
        if (result == null) result = caseDepXY_IMPL(cerclexy);
        if (result == null) result = caseMovement(cerclexy);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DrnPackage.CARREXY:
      {
        CARREXY carrexy = (CARREXY)theEObject;
        T result = caseCARREXY(carrexy);
        if (result == null) result = caseDepXY_IMPL(carrexy);
        if (result == null) result = caseMovement(carrexy);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DrnPackage.DEP_YZ_IMPL:
      {
        DepYZ_IMPL depYZ_IMPL = (DepYZ_IMPL)theEObject;
        T result = caseDepYZ_IMPL(depYZ_IMPL);
        if (result == null) result = caseMovement(depYZ_IMPL);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DrnPackage.CERCLEYZ:
      {
        CERCLEYZ cercleyz = (CERCLEYZ)theEObject;
        T result = caseCERCLEYZ(cercleyz);
        if (result == null) result = caseDepYZ_IMPL(cercleyz);
        if (result == null) result = caseMovement(cercleyz);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DrnPackage.CARREYZ:
      {
        CARREYZ carreyz = (CARREYZ)theEObject;
        T result = caseCARREYZ(carreyz);
        if (result == null) result = caseDepYZ_IMPL(carreyz);
        if (result == null) result = caseMovement(carreyz);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DrnPackage.DEP_XZ_IMPL:
      {
        DepXZ_IMPL depXZ_IMPL = (DepXZ_IMPL)theEObject;
        T result = caseDepXZ_IMPL(depXZ_IMPL);
        if (result == null) result = caseMovement(depXZ_IMPL);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DrnPackage.CERCLEXZ:
      {
        CERCLEXZ cerclexz = (CERCLEXZ)theEObject;
        T result = caseCERCLEXZ(cerclexz);
        if (result == null) result = caseDepXZ_IMPL(cerclexz);
        if (result == null) result = caseMovement(cerclexz);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DrnPackage.CARREXZ:
      {
        CARREXZ carrexz = (CARREXZ)theEObject;
        T result = caseCARREXZ(carrexz);
        if (result == null) result = caseDepXZ_IMPL(carrexz);
        if (result == null) result = caseMovement(carrexz);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DrnPackage.DEP_XYZ_IMPL:
      {
        DepXYZ_IMPL depXYZ_IMPL = (DepXYZ_IMPL)theEObject;
        T result = caseDepXYZ_IMPL(depXYZ_IMPL);
        if (result == null) result = caseMovement(depXYZ_IMPL);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DrnPackage.FLIP:
      {
        Flip flip = (Flip)theEObject;
        T result = caseFlip(flip);
        if (result == null) result = caseDepXYZ_IMPL(flip);
        if (result == null) result = caseMovement(flip);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DrnPackage.ROTATE:
      {
        Rotate rotate = (Rotate)theEObject;
        T result = caseRotate(rotate);
        if (result == null) result = caseMovement(rotate);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DrnPackage.WAIT:
      {
        Wait wait = (Wait)theEObject;
        T result = caseWait(wait);
        if (result == null) result = caseMovement(wait);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DrnPackage.TAKE_OFF:
      {
        TakeOff takeOff = (TakeOff)theEObject;
        T result = caseTakeOff(takeOff);
        if (result == null) result = caseMovement(takeOff);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DrnPackage.LAND:
      {
        Land land = (Land)theEObject;
        T result = caseLand(land);
        if (result == null) result = caseMovement(land);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DrnPackage.DEVICE:
      {
        Device device = (Device)theEObject;
        T result = caseDevice(device);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DrnPackage.DECLARATION:
      {
        Declaration declaration = (Declaration)theEObject;
        T result = caseDeclaration(declaration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DrnPackage.DEFINITION:
      {
        Definition definition = (Definition)theEObject;
        T result = caseDefinition(definition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DrnPackage.WITH:
      {
        With with = (With)theEObject;
        T result = caseWith(with);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DrnPackage.OPTION:
      {
        Option option = (Option)theEObject;
        T result = caseOption(option);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DrnPackage.REF_DEVICE:
      {
        RefDevice refDevice = (RefDevice)theEObject;
        T result = caseRefDevice(refDevice);
        if (result == null) result = caseOption(refDevice);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DrnPackage.ATTRIBUT:
      {
        Attribut attribut = (Attribut)theEObject;
        T result = caseAttribut(attribut);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DrnPackage.LED_IMPL:
      {
        Led_Impl led_Impl = (Led_Impl)theEObject;
        T result = caseLed_Impl(led_Impl);
        if (result == null) result = caseOption(led_Impl);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DrnPackage.LED_BLINK:
      {
        LedBlink ledBlink = (LedBlink)theEObject;
        T result = caseLedBlink(ledBlink);
        if (result == null) result = caseOption(ledBlink);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DrnPackage.CAMERA:
      {
        Camera camera = (Camera)theEObject;
        T result = caseCamera(camera);
        if (result == null) result = caseOption(camera);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DrnPackage.TYPE_GENERIC:
      {
        TypeGeneric typeGeneric = (TypeGeneric)theEObject;
        T result = caseTypeGeneric(typeGeneric);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DrnPackage.ELEMENT:
      {
        Element element = (Element)theEObject;
        T result = caseElement(element);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Root</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Root</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRoot(Root object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Model</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Model</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseModel(Model object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Library</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Library</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLibrary(Library object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Context</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Context</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseContext(Context object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Limit</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Limit</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLimit(Limit object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Surface</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Surface</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSurface(Surface object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Initial Position</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Initial Position</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInitialPosition(InitialPosition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Initial Direction</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Initial Direction</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInitialDirection(InitialDirection object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Initial Position X</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Initial Position X</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInitialPositionX(InitialPositionX object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Initial Position Y</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Initial Position Y</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInitialPositionY(InitialPositionY object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Max Length</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Max Length</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMaxLength(MaxLength object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Max Width</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Max Width</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMaxWidth(MaxWidth object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Max Speed</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Max Speed</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMaxSpeed(MaxSpeed object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Max Height</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Max Height</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMaxHeight(MaxHeight object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Assignement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Assignement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAssignement(Assignement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExpression(Expression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Movement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Movement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMovement(Movement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Ref Part</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Ref Part</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRefPart(RefPart object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Ref Part Lib</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Ref Part Lib</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRefPartLib(RefPartLib object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>And</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>And</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAnd(And object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Dep YImpl</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Dep YImpl</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDepY_Impl(DepY_Impl object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>FORWARD</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>FORWARD</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFORWARD(FORWARD object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>BACKWARD</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>BACKWARD</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBACKWARD(BACKWARD object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Dep XImpl</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Dep XImpl</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDepX_Impl(DepX_Impl object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>LEFT</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>LEFT</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLEFT(LEFT object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>RIGHT</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>RIGHT</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRIGHT(RIGHT object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Dep ZImpl</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Dep ZImpl</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDepZ_Impl(DepZ_Impl object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>UP</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>UP</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseUP(UP object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>DOWN</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>DOWN</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDOWN(DOWN object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Dep XY IMPL</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Dep XY IMPL</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDepXY_IMPL(DepXY_IMPL object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>CERCLEXY</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>CERCLEXY</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCERCLEXY(CERCLEXY object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>CARREXY</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>CARREXY</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCARREXY(CARREXY object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Dep YZ IMPL</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Dep YZ IMPL</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDepYZ_IMPL(DepYZ_IMPL object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>CERCLEYZ</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>CERCLEYZ</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCERCLEYZ(CERCLEYZ object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>CARREYZ</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>CARREYZ</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCARREYZ(CARREYZ object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Dep XZ IMPL</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Dep XZ IMPL</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDepXZ_IMPL(DepXZ_IMPL object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>CERCLEXZ</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>CERCLEXZ</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCERCLEXZ(CERCLEXZ object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>CARREXZ</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>CARREXZ</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCARREXZ(CARREXZ object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Dep XYZ IMPL</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Dep XYZ IMPL</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDepXYZ_IMPL(DepXYZ_IMPL object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Flip</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Flip</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFlip(Flip object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Rotate</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Rotate</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRotate(Rotate object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Wait</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Wait</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseWait(Wait object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Take Off</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Take Off</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTakeOff(TakeOff object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Land</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Land</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLand(Land object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Device</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Device</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDevice(Device object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Declaration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Declaration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDeclaration(Declaration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDefinition(Definition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>With</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>With</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseWith(With object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Option</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Option</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOption(Option object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Ref Device</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Ref Device</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRefDevice(RefDevice object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Attribut</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Attribut</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAttribut(Attribut object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Led Impl</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Led Impl</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLed_Impl(Led_Impl object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Led Blink</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Led Blink</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLedBlink(LedBlink object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Camera</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Camera</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCamera(Camera object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Type Generic</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Type Generic</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTypeGeneric(TypeGeneric object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Element</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Element</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseElement(Element object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //DrnSwitch
